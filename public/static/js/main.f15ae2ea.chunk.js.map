{"version":3,"sources":["helpers/data.helpers.ts","services/http.service.ts","services/config.service.ts","components/app.context.ts","components/withContext/withContext.comp.tsx","components/loader/loader.comp.tsx","helpers/pagination.helpers.ts","components/button/button.comp.tsx","components/infiniteLoader/infiniteLoader.comp.tsx","components/pagination/pagination.comp.tsx","components/table/table.comp.tsx","components/cards/cards.comp.tsx","components/formRow/formRow.comp.tsx","components/queryParams/queryParams.comp.tsx","components/popup/popup.comp.tsx","helpers/file.helpers.ts","components/formPopup/formPopup.comp.tsx","components/filterField/filterField.comp.tsx","common/models/states.types.helper.ts","common/models/config.types.helper.ts","components/graphPopup/graphPopup.comp.tsx","components/page/page.comp.tsx","components/authPage/authPage.comp.tsx","components/navigation/navigation.comp.tsx","components/customStyles/customStyles.comp.tsx","components/app.tsx","serviceWorker.ts","index.tsx","common/locale.js"],"names":["dataHelpers","data","dataPath","attr","extractedData","digProps","split","prop","field","type","arrayType","HttpService","baseUrl","unauthorizedRedirectUrl","errorMessageDataPath","loginUrl","requestHeaders","this","url","indexOf","rawData","outputUrl","Object","keys","forEach","key","urlParamName","replace","queryParams","length","replaceParamsInUrl","params","page","limit","param","value","name","push","join","console","log","reqUrl","urlIsAbsolute","origUrl","finalUrl","buildUrl","authorization","sessionStorage","getItem","Authorization","method","toUpperCase","headers","assign","body","undefined","res","errorMessage","json","path","dataAtPath","extractDataByDataPath","status","statusText","clear","redirectUrl","encodeURIComponent","document","location","href","Error","getErrorMessage","responseType","fetch","ok","text","handleError","buildRequest","makeRequest","httpService","HTTPService","endsWith","import","default","getRemoteConfig","config","isValid","configSchema","require","validate","Ajv","allErrors","verbose","compile","firstError","errors","message","error","AppContext","React","createContext","activePage","setError","setActivePage","withAppContext","Component","props","Consumer","context","Loader","className","paginationHelpers","parseInt","_page","_itemsPerPage","_total","Button","color","children","InfiniteLoader","Pagination","callbacks","pagination","customLabels","previousTitle","previousPageTitle","nextTitle","nextPageTitle","disabled","hasPreviousPage","onClick","previousPage","title","aria-hidden","hasNextPage","nextPage","Table","items","fields","customActions","editLabel","buttons","editItem","deleteLabel","deleteItem","actionColumnHeader","tableColumnHeaders","actions","paginationCallbacks","getNextPage","getPreviousPage","renderTableRow","item","rowIdx","map","fieldIdx","truncate","origField","origItem","src","alt","label","fieldValue","target","rel","urlLabel","style","backgroundColor","html","htmlCode","dangerouslySetInnerHTML","__html","renderTableCell","put","call","action","idx","icon","delete","renderTableContent","useEffect","clientHeight","window","innerHeight","dataLength","next","hasMore","loader","Cards","renderActions","cardIdx","renderCard","Fragment","renderRow","renderCardSkeleton","duration","startingIndex","Array","from","renderSkeletons","FormRow","direction","showReset","onChange","useState","optionSources","setOptionSources","pageHeaders","addArrayItemLabel","addArrayItem","clearLabel","clearInput","renderArrayItems","originalField","array","itemIdx","inputField","renderFieldInput","fieldName","updatedArray","localValue","splice","removeItemToFieldArray","aria-label","e","preventDefault","addItemToFieldArray","changeCallback","inputProps","defaultPlaceholder","placeholder","readonly","required","checked","optionSource","a","async","actualMethod","result","optionSourceData","option","valuePath","displayPath","display","toast","loadOptionSourceFromRemote","sortBy","finalOptions","options","sortedOptions","orderBy","locale","select","placeholders","object","enter_text","number","valueAsNumber","email","password","accept","file","date","originalName","QueryParams","initialParams","paginationConfig","submitCallback","setQueryParams","submit","formChanged","submitAfterChange","updatedQueryParams","filteredParams","filter","includes","search","onSubmit","queryParam","portalRoot","getElementById","createElement","setAttribute","append","PortalPopup","el","componentDidMount","appendChild","componentWillUnmount","removeChild","ReactDOM","createPortal","Popup","_handleKeyDown","show","closeCallback","keyCode","closeLabel","closeForm","ref","refCallback","addEventListener","bind","removeEventListener","fileHelpers","fieldIndex","unflatten","FormPopup","getSingleConfig","methodConfig","fieldsCopy","JSON","parse","stringify","loading","setLoading","formFields","setFormFields","finalRawData","setFinalRawData","submitForm","finalObject","includeOriginalFields","formData","FormData","containFiles","isMultipartForm","validationError","useInUrl","checkIfFieldIsObject","fileInput","querySelector","files","firstFile","success","updatedFormFields","dataTransform","dataPathSplit","lookupValue","objToLookIn","pathElem","lookup","initFormFields","FilterField","toLowerCase","isQueryPaginationState","obj","source","isBodyPaginationState","isQueryPagination","isBodyPagination","GraphPopup","getAllConfig","buildInitQueryParamsAndPaginationState","initQueryParams","initialPagination","descending","find","previous","Page","useParams","useHistory","pageMethods","methods","getAll","infiniteScroll","getSingle","postConfig","post","graphConfig","graph","putConfig","deleteConfig","addItemLabel","addItem","add","itemName","openGraphLabel","addItemFormTitle","formTitles","editItemFormTitle","update","graphTitle","openedPopup","setOpenedPopup","openedGraph","setOpenedGraph","setPagination","setItems","setFilter","openEditPopup","updateItem","openCustomActionPopup","performAction","fetchPageData","isArray","orderedItems","total","newPaginationState","getUpdatedPaginationState","getAllRequest","confirm","updatedParams","remove","submitQueryParams","reset","paramsToUrl","queryState","newState","nextPath","prevPath","countPath","nextActivePage","pages","p","pIdx","id","parsedParams","QueryString","finalQueryParams","decodeURIComponent","extractQueryParams","description","fieldsToFilter","filterable","currentCountFrom","currentCountTo","showing_result","out_of","itemsCount","renderPaginationStateLabel","filteredItems","passFilter","nothing_to_see","newPage","renderItemsUI","renderPageContent","refreshData","AuthPage","user","setUser","pwd","setPwd","tenant","setTenant","credentials","username","login_error","setItem","token","username_suggestion","event","password_suggenstion","tenant_suggenstion","Navigation","isOpened","setIsOpened","to","activeClassName","CustomStyles","cssVars","styles","vars","arr","defaultAppName","changeFavicon","link","oldLink","head","App","firstLoad","setFirstLoad","setConfig","appName","loadConfig","windowConfig","RESTool","remoteConfig","ConfigService","loadDefaultConfig","favicon","remoteUrl","validateConfig","Provider","exact","component","customStyles","scrollDuration","cosParameter","scrollY","scrollCount","oldTimestamp","performance","now","requestAnimationFrame","step","newTimestamp","Math","PI","scrollTo","round","cos","scrollToTop","position","POSITION","TOP_CENTER","autoClose","draggable","Boolean","hostname","match","render","navigator","serviceWorker","ready","then","registration","unregister","freeze","previous_page","next_page","session_expired","module","exports"],"mappings":"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","file":"static/js/main.f15ae2ea.chunk.js","sourcesContent":["import { IConfigInputField } from \"../common/models/config.model\";\r\n\r\nclass DataHelpers {\r\n\r\n  public extractDataByDataPath(data: any, dataPath: string, attr: string | null = null) {\r\n    if (!data || !dataPath) {\r\n      if (attr) {\r\n        return data[attr];\r\n      }\r\n      return data;\r\n    }\r\n\t\r\n    let extractedData: any = data;\r\n    const digProps: string[] = dataPath.split('.');\r\n\r\n    for (let prop of digProps) {\r\n      if (typeof extractedData[prop] !== 'undefined') {\r\n        extractedData = extractedData[prop];\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    if (typeof extractedData === 'undefined') {\r\n      return null;\r\n    }\r\n\r\n    if (attr) {\r\n      return extractedData[attr];\r\n    }\r\n\r\n    return extractedData;\r\n  }\r\n\r\n  public checkIfFieldIsObject(field: IConfigInputField): boolean {\r\n    if (field.type === 'object') {\r\n      return true;\r\n    }\r\n\r\n    if (field.type === 'array') {\r\n      if (!field.arrayType || field.arrayType === 'object') {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}\r\n\r\nexport const dataHelpers = new DataHelpers();","import { toast } from 'react-toastify';\r\nimport locale from '../common/locale';\r\nimport { TConfigMethod, IQueryParam } from '../common/models/config.model';\r\nimport { dataHelpers } from '../helpers/data.helpers';\r\n\r\nexport type ResponseType = 'json' | 'text' | 'boolean' | 'status';\r\n\r\nexport interface IFetchParams {\r\n  origUrl: string\r\n  method?: TConfigMethod\r\n  headers?: any\r\n  queryParams?: IQueryParam[]\r\n  rawData?: any\r\n  body?: any\r\n  responseType?: ResponseType\r\n}\r\n\r\nclass HttpService {\r\n  public baseUrl: string;\r\n  public loginUrl: string;\r\n  public unauthorizedRedirectUrl: string;\r\n  public errorMessageDataPath: string | string[];\r\n  public requestHeaders: any;\r\n\r\n  constructor(baseUrl: string = '', unauthorizedRedirectUrl: string = '', errorMessageDataPath: string = '', loginUrl: string = '') {\r\n    this.baseUrl = baseUrl || '';\r\n    this.loginUrl = loginUrl || '';\r\n    this.unauthorizedRedirectUrl = unauthorizedRedirectUrl || '';\r\n    this.errorMessageDataPath = errorMessageDataPath || '';\r\n    this.requestHeaders = {};\r\n  }\r\n\r\n  private urlIsAbsolute(url: string) {\r\n    if (url.indexOf('http') === 0 || url.indexOf('https') === 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private replaceParamsInUrl(url: string, rawData?: any): string {\r\n    if (!rawData || typeof rawData !== 'object') {\r\n      return url;\r\n    }\r\n\r\n    let outputUrl = url;\r\n\r\n    Object.keys(rawData).forEach((key) => {\r\n      const urlParamName = `:${key}`;\r\n      outputUrl = outputUrl.replace(urlParamName, rawData[key] as string);\r\n    });\r\n\r\n    return outputUrl;\r\n  }\r\n\r\n  private buildUrl(url: string, queryParams: IQueryParam[] = [], rawData?: any): string {\r\n    if (!queryParams || !queryParams.length) {\r\n      return this.replaceParamsInUrl(url, rawData);\r\n    }\r\n\r\n    let outputUrl = url;\r\n    const params = [];\r\n    let page = '-1'\r\n    let limit = '10'\r\n\r\n    for (let param of queryParams) {\r\n      let value = '';\r\n      if (!param.name || typeof param.value === 'undefined') { continue; } \r\n      if (param.name === 'page') { page = param.value; continue; }\r\n      if (param.name === 'limit') { limit = param.value; continue; }\r\n      if (param.name === 'tags' && param.value === \"\") { continue; }\r\n      if (param.name === 'info') value = '{\"$regex\":\"' + param.value + '\",\"$options\":\"i\"}';\r\n      else value = '\"' + param.value + '\"';\r\n      //test regex\r\n      params.push(`\"${param.name}\":{\"$regex\" : ${value || ''}}`);\r\n      //params.push(`\"${param.name}\":${value || ''}`);\r\n\r\n    }\r\n\r\n    outputUrl += '?filter={' + params.join(',') + '}';\r\n    if(page != '-1') outputUrl += \"&page=\" + page;\r\n    outputUrl += \"&limit=\" + limit;\r\n\r\n    console.log(\"Requested URL : \"+outputUrl);\r\n\r\n    return outputUrl;\r\n  }\r\n\r\n  private buildRequest(params: IFetchParams): { url: string, params: any } {\r\n    const reqUrl: string = this.urlIsAbsolute(params.origUrl) ? params.origUrl : this.baseUrl + params.origUrl;\r\n    const finalUrl: string = this.buildUrl(reqUrl, params.queryParams, params.rawData);\r\n    const authorization = sessionStorage.getItem('diten-token') ? { Authorization: sessionStorage.getItem('diten-token'), } : {};\r\n    const requestParams = {\r\n      method: params.method ? params.method.toUpperCase() : 'GET',\r\n      headers: Object.assign(authorization, this.requestHeaders, params.headers || {}),\r\n      body: params.method === 'post' || params.method === 'put' || params.method === 'patch' ? params.body : undefined\r\n    };\r\n\r\n    return {\r\n      url: finalUrl,\r\n      params: requestParams\r\n    };\r\n  }\r\n\r\n  private async getErrorMessage(res: Response | any): Promise<string> {\r\n    let errorMessage: string = '';\r\n\r\n    try {\r\n      const body = await res.json();\r\n\r\n      for (const path of this.errorMessageDataPath) {\r\n        const dataAtPath = dataHelpers.extractDataByDataPath(body, path);\r\n\r\n        if (dataAtPath) {\r\n          errorMessage = dataAtPath;\r\n        }\r\n      }\r\n    } catch { } // TODO: proper handling of errors (^.^)\r\n\r\n    return errorMessage && errorMessage.length ?\r\n      errorMessage :\r\n      `${res.status} - ${res.statusText || ''}`;\r\n  }\r\n\r\n  private async handleError(res: Response) {\r\n    // In case response status is \"Unauthorized\", redirect to relevant url\r\n\r\n    if (res.status === 401 && this.unauthorizedRedirectUrl) {\r\n      //test\r\n      \r\n      sessionStorage.clear();\r\n\r\n      \r\n\r\n      const redirectUrl: string = this.unauthorizedRedirectUrl.replace(':returnUrl', encodeURIComponent(document.location.href));\r\n      document.location.replace(redirectUrl);\r\n      return;\r\n    }\r\n\r\n    throw new Error(await this.getErrorMessage(res));\r\n  }\r\n\r\n  private async makeRequest(url: string, params: any = {}, responseType: ResponseType = 'json') {\r\n    const res: Response = await fetch(url, Object.assign({}, params, {}));\r\n\r\n    if (res.ok) {\r\n      switch (responseType) {\r\n        case 'json':\r\n          return await res.json();\r\n        case 'text':\r\n          return await res.text();\r\n        case 'boolean':\r\n          return true;\r\n        default:\r\n          return true;\r\n      }\r\n    }\r\n\r\n    await this.handleError(res);\r\n  }\r\n\r\n  public async fetch({ method, origUrl, queryParams, rawData, body, headers, responseType }: IFetchParams) {\r\n    const { url, params } = this.buildRequest({ method, origUrl, queryParams, rawData, body, headers });\r\n    return await this.makeRequest(url, params, responseType);\r\n  }\r\n}\r\n\r\nexport default HttpService;\r\n","import HTTPService from './http.service';\r\nimport { IConfig } from '../common/models/config.model';\r\nimport Ajv from 'ajv';\r\n\r\nconst httpService: HTTPService = new HTTPService();\r\n\r\nclass ConfigService extends HTTPService {\r\n\r\n  public async getRemoteConfig(url: string) {\r\n    if (url.endsWith('.js')) {\r\n      return (await import(/* webpackIgnore: true */url)).default;\r\n    }\r\n    return await httpService.fetch({\r\n      origUrl: url,\r\n    });\r\n  }\r\n\r\n  public async loadDefaultConfig() { return (await this.getRemoteConfig('../../config.js')); }\r\n\r\n  public validateConfig(config: IConfig | null): { isValid: boolean, errorMessage: string | null } {\r\n    if (config === null) {\r\n      return {\r\n        isValid: true,\r\n        errorMessage: null,\r\n      }\r\n    }\r\n    const configSchema = require('../assets/schemas/config.schema.json');\r\n    const ajv = new Ajv({\r\n      allErrors: true,\r\n      verbose: true,\r\n    });\r\n    const validate = ajv.compile(configSchema);\r\n    const isValid = validate(config);\r\n    if (typeof isValid !== 'boolean') {\r\n      throw new Error('Unexpected asynchronous JSON validation');\r\n    }\r\n    if (isValid) {\r\n      return {\r\n        isValid,\r\n        errorMessage: null,\r\n      }\r\n    }\r\n    const firstError = validate.errors ? validate.errors[0] : undefined;\r\n    let errorMessage: string | null = null;\r\n    if (firstError?.message && firstError?.dataPath) {\r\n      errorMessage = `Error parsing configuration at \"${firstError.dataPath}\": ${firstError.message}`\r\n    } else if (firstError?.message) {\r\n      errorMessage = `Error parsing configuration: ${firstError.message}`\r\n    } else if (firstError?.dataPath) {\r\n      errorMessage = `Error parsing configuration at \"${firstError.dataPath}\"`\r\n    } else {\r\n      errorMessage = `Error parsing configuration`;\r\n    }\r\n    console.error(errorMessage);\r\n    console.error('All configuration errors: ', validate.errors);\r\n    return {\r\n      isValid,\r\n      errorMessage,\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport default new ConfigService();\r\n","import React from 'react';\r\nimport { IConfig, IConfigPage } from '../common/models/config.model';\r\nimport HttpService from '../services/http.service';\r\n\r\nexport interface IAppContext {\r\n  config: IConfig | null\r\n  activePage: IConfigPage | null\r\n  error: string | null\r\n  setError: (error: string | null) => void\r\n  setActivePage: (activePage: IConfigPage | null) => void\r\n  httpService: HttpService\r\n}\r\n\r\nexport const AppContext = React.createContext<IAppContext>({\r\n  config: null,\r\n  activePage: null,\r\n  error: null,\r\n  setError: () => {},\r\n  setActivePage: () => {},\r\n  httpService: new HttpService()\r\n});","import React from 'react';\r\nimport { AppContext } from '../app.context';\r\n\r\nexport const withAppContext = (Component: any) => {\r\n  return (props: any) => (\r\n    <AppContext.Consumer>    \r\n      {(context) => {\r\n        return <Component {...props} context={context} />\r\n      }}\r\n    </AppContext.Consumer>\r\n  );\r\n};","import React from 'react';\r\n\r\nimport './loader.scss';\r\n\r\nexport const Loader = () => {\r\n  return (\r\n    <div className=\"app-loader cp-spinner cp-balls small\"></div>\r\n  );\r\n};","class PaginationHelpers {\r\n  public hasPreviousPage(page: string | number | undefined): boolean {\r\n    if (page === undefined) {\r\n      return false;\r\n    }\r\n\r\n    if (typeof page === 'string') {\r\n      return parseInt(page) > 1;\r\n    }\r\n\r\n    return page > 1;\r\n  }\r\n\r\n  public hasNextPage(_page: string | number, _itemsPerPage: string | number, _total: string | number | undefined): boolean {\r\n    if (_total === undefined) {\r\n      return true;\r\n    }\r\n    const page = typeof _page === 'string' ? parseInt(_page) : _page;\r\n    const itemsPerPage = typeof _itemsPerPage === 'string' ? parseInt(_itemsPerPage) : _itemsPerPage;\r\n    const total = typeof _total === 'string' ? parseInt(_total) : _total;\r\n\r\n    return page * itemsPerPage < total;\r\n  }\r\n}\r\n\r\nexport const paginationHelpers = new PaginationHelpers();","import React from 'react';\r\n\r\nimport './button.scss';\r\n\r\ninterface IProps {\r\n  children: any\r\n  type?: 'submit' | 'button' | 'reset'\r\n  title?: string\r\n  className?: string\r\n  onClick?: (e: any) => void\r\n  color?: 'gray' | 'blue' | 'green' | 'red'\r\n  disabled?: boolean\r\n}\r\n\r\nexport const Button = (props: IProps) => {\r\n  return (\r\n    <button {...props} className={`button ${props.className || ''} ${props.color || ''}`}>{props.children}</button>\r\n  );\r\n};","import React from 'react';\r\n\r\nimport './infiniteLoader.scss';\r\n\r\nexport const InfiniteLoader = () => {\r\n  return (\r\n    <div className=\"app-infinite-loader cp-spinner cp-balls small\"></div>\r\n  );\r\n};","import React from 'react';\r\nimport { ICustomLabels } from '../../common/models/config.model';\r\nimport { IPaginationState } from '../../common/models/states.model';\r\nimport { Button } from '../button/button.comp';\r\n\r\nimport './pagination.scss';\r\n\r\ninterface IProps {\r\n  pagination: IPaginationState\r\n  callbacks: {\r\n    previousPage: () => void,\r\n    nextPage: () => void,\r\n  }\r\n  customLabels?: ICustomLabels\r\n}\r\n\r\nexport const Pagination = ({ callbacks, pagination, customLabels }: IProps) => {\r\n  const previousTitle = customLabels?.pagination?.previousPageTitle || 'Previous page';\r\n  const nextTitle = customLabels?.pagination?.nextPageTitle || 'Next page';\r\n  return (\r\n    <div className=\"pagination-wrapper\">\r\n      <Button disabled={!pagination.hasPreviousPage} onClick={() => callbacks.previousPage()} title={previousTitle}>\r\n        <i className=\"fa fa-arrow-left\" aria-hidden=\"true\"></i>\r\n      </Button>\r\n      <Button disabled={!pagination.hasNextPage} onClick={() => callbacks.nextPage()} title={nextTitle}>\r\n        <i className=\"fa fa-arrow-right\" aria-hidden=\"true\" ></i>\r\n      </Button>\r\n    </div>\r\n  );\r\n};","import React, { useEffect } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\nimport { IConfigDisplayField, IConfigCustomAction, ICustomLabels } from '../../common/models/config.model';\r\nimport { dataHelpers } from '../../helpers/data.helpers';\r\nimport { Button } from '../button/button.comp';\r\nimport { InfiniteLoader } from '../infiniteLoader/infiniteLoader.comp';\r\nimport { IPaginationState } from '../../common/models/states.model';\r\nimport { Pagination } from '../pagination/pagination.comp';\r\n\r\nimport './table.scss';\r\n\r\ninterface IProps {\r\n  items: any[]\r\n  pagination?: IPaginationState\r\n  callbacks: {\r\n    delete: ((item: any) => void) | null\r\n    put: ((item: any) => void) | null\r\n    action: (item: any, action: IConfigCustomAction) => void\r\n    getPreviousPage: (() => void) | null\r\n    getNextPage: (() => void) | null\r\n  }\r\n  fields: IConfigDisplayField[]\r\n  customActions?: IConfigCustomAction[]\r\n  customLabels?: ICustomLabels\r\n}\r\n\r\nexport const Table = ({ items, fields, pagination, callbacks, customActions, customLabels }: IProps) => {\r\n  const editLabel = customLabels?.buttons?.editItem || 'Edit';\r\n  const deleteLabel = customLabels?.buttons?.deleteItem || 'Delete';\r\n  const actionColumnHeader = customLabels?.tableColumnHeaders?.actions || 'Actions';\r\n  const paginationCallbacks = {\r\n    nextPage: callbacks.getNextPage || (() => { return; }),\r\n    previousPage: callbacks.getPreviousPage || (() => { return; }),\r\n  };\r\n\r\n  function renderTableCell(origField: IConfigDisplayField, origItem: any, value: any) {\r\n    if (origField.type === 'boolean') {\r\n      value = value ? true : false;\r\n    }\r\n\r\n    if (value && typeof value === 'object') {\r\n      return 'object';\r\n    }\r\n\r\n    switch (origField.type) {\r\n      case 'text':\r\n        return <span>{value}</span>;\r\n      case 'boolean':\r\n        return <div className={`bool ${value ? 'true' : 'false'}`}></div>;\r\n      case 'image':\r\n        return <img src={value || ''} alt={value || origField.label || origField.name} />;\r\n      case 'url':\r\n        let url: string = origField.url || value || '';\r\n\r\n        // Replace all url vars\r\n        fields.forEach((field) => {\r\n          const fieldValue = dataHelpers.extractDataByDataPath(origItem, field.dataPath, field.name);\r\n          url = url.replace(`:${field.name}`, fieldValue);\r\n        });\r\n\r\n        return <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{origField.urlLabel || value}</a>;\r\n      case 'colorbox':\r\n        return <div className=\"colorbox\" style={{ backgroundColor: value }}></div>;\r\n      case 'html':\r\n        const htmlCode = origField.htmlCode || '<span>{value}</span>';\r\n        const html =  htmlCode.replace('{value}', value);\r\n        return <div dangerouslySetInnerHTML={{__html: html}}></div>\r\n      default:\r\n        return value;\r\n    }\r\n  }\r\n\r\n  function renderTableRow(item: any, rowIdx: number) {\r\n    return (\r\n      <tr key={`tr_${rowIdx}`}>\r\n        {\r\n          fields.map((field, fieldIdx) => {\r\n            const value = dataHelpers.extractDataByDataPath(item, field.dataPath, field.name);\r\n            return (\r\n              <td className={field.truncate ? 'truncate' : ''} key={`td_${rowIdx}_${fieldIdx}`}>\r\n                {renderTableCell(field, item, value)}\r\n              </td>\r\n            );\r\n          })\r\n        }\r\n        <td>\r\n          <div className=\"actions-wrapper\">\r\n            {\r\n              callbacks.put &&\r\n              <Button onClick={() => callbacks.put?.(item)} title={editLabel}>\r\n                <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\r\n              </Button>\r\n            }\r\n            {\r\n              (customActions && customActions.length > 0) &&\r\n              customActions.map((action, idx) => (\r\n                <Button key={`action_${rowIdx}_${idx}`} onClick={() => callbacks.action(item, action)} title={action.name}>\r\n                  <i className={`fa fa-${action.icon || 'cogs'}`} aria-hidden=\"true\"></i>\r\n                </Button>\r\n              ))\r\n            }\r\n            {\r\n              callbacks.delete &&\r\n              <Button onClick={() => callbacks.delete?.(item)} title={deleteLabel}>\r\n                <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n              </Button>\r\n            }\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  function renderTableContent() {\r\n    return (\r\n      <table className=\"pure-table\">\r\n        <thead>\r\n          <tr>\r\n            {\r\n              fields.map((field) => {\r\n                return <th key={`th_${field.name}`}>{field.label || field.name}</th>;\r\n              })\r\n            }\r\n            <th>{actionColumnHeader}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            items.map(renderTableRow)\r\n          }\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      pagination?.type === 'infinite-scroll'\r\n      && document.body.clientHeight <= window.innerHeight\r\n      && pagination?.hasNextPage\r\n    ) {\r\n      paginationCallbacks.nextPage();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  if (pagination?.type === 'infinite-scroll') {\r\n    return (\r\n      <InfiniteScroll\r\n        dataLength={items.length}\r\n        next={callbacks.getNextPage || (() => null)}\r\n        hasMore={pagination?.hasNextPage || false}\r\n        loader={<InfiniteLoader />}\r\n      >\r\n        {renderTableContent()}\r\n      </InfiniteScroll>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"table-wrapper\">\r\n      {renderTableContent()}\r\n      {\r\n        pagination &&\r\n        pagination.type === 'buttons' &&\r\n        <Pagination\r\n          callbacks={paginationCallbacks}\r\n          pagination={pagination}\r\n          customLabels={customLabels}\r\n        ></Pagination>\r\n      }\r\n    </div >\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport Skeleton from 'react-loading-skeleton';\r\n\r\nimport { IConfigDisplayField, IConfigCustomAction, ICustomLabels } from '../../common/models/config.model';\r\nimport { IPaginationState } from '../../common/models/states.model';\r\nimport { dataHelpers } from '../../helpers/data.helpers';\r\nimport { Button } from '../button/button.comp';\r\nimport { Pagination } from '../pagination/pagination.comp';\r\n\r\nimport './cards.scss';\r\n\r\ninterface IProps {\r\n  items: any[]\r\n  pagination?: IPaginationState\r\n  callbacks: {\r\n    delete: ((item: any) => void) | null\r\n    put: ((item: any) => void) | null\r\n    action: (item: any, action: IConfigCustomAction) => void\r\n    getNextPage: (() => void) | null\r\n    getPreviousPage: (() => void) | null\r\n  }\r\n  fields: IConfigDisplayField[]\r\n  customActions?: IConfigCustomAction[]\r\n  customLabels?: ICustomLabels\r\n}\r\n\r\nexport const Cards = ({ items, fields, callbacks, customActions, customLabels, pagination }: IProps) => {\r\n  const editLabel: string = customLabels?.buttons?.editItem || 'Edit';\r\n  const deleteLabel: string = customLabels?.buttons?.deleteItem || 'Delete';\r\n  const paginationCallbacks = {\r\n    nextPage: callbacks.getNextPage || (() => { return; }),\r\n    previousPage: callbacks.getPreviousPage || (() => { return; }),\r\n  };\r\n\r\n  function renderRow(origField: IConfigDisplayField, origItem: any, value: any) {\r\n    if (origField.type === 'boolean') {\r\n      value = value ? true : false;\r\n    }\r\n\r\n    if (value && typeof value === 'object') {\r\n      return 'object';\r\n    }\r\n\r\n    switch (origField.type) {\r\n      case 'text':\r\n        return <span>{value}</span>;\r\n      case 'boolean':\r\n        return <div className={`bool ${value ? 'true' : 'false'}`}></div>;\r\n      case 'image':\r\n        if (!value) {\r\n          return <React.Fragment></React.Fragment>;\r\n        }\r\n        return <img src={value || ''} alt={value || origField.label || origField.name} />;\r\n      case 'url':\r\n        let url: string = origField.url || value || '';\r\n\r\n        // Replace all url vars\r\n        fields.forEach((field) => {\r\n          const fieldValue = dataHelpers.extractDataByDataPath(origItem, field.dataPath, field.name);\r\n          url = url.replace(`:${field.name}`, fieldValue);\r\n        });\r\n\r\n        return <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{origField.urlLabel || value}</a>;\r\n      case 'colorbox':\r\n        return <div className=\"colorbox\" style={{ backgroundColor: value }}></div>;\r\n      case 'html':\r\n        const htmlCode = origField.htmlCode || '<span>{value}</span>';\r\n        const html =  htmlCode.replace('{value}', value);\r\n        return <div dangerouslySetInnerHTML={{__html: html}}></div>\r\n      default:\r\n        return value;\r\n    }\r\n  }\r\n\r\n  function renderActions(item: any, cardIdx: number) {\r\n    return (\r\n      <div className=\"actions-wrapper\">\r\n        {\r\n          callbacks.put &&\r\n          <Button onClick={() => callbacks.put?.(item)} title={editLabel}>\r\n            <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\r\n          </Button>\r\n        }\r\n        {\r\n          (customActions && customActions.length > 0) &&\r\n          customActions.map((action, idx) => (\r\n            <Button key={`action_${cardIdx}_${idx}`} onClick={() => callbacks.action(item, action)} title={action.name}>\r\n              <i className={`fa fa-${action.icon || 'cogs'}`} aria-hidden=\"true\"></i>\r\n            </Button>\r\n          ))\r\n        }\r\n        {\r\n          callbacks.delete &&\r\n          <Button onClick={() => callbacks.delete?.(item)} title={deleteLabel}>\r\n            <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n          </Button>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderCard(item: any, cardIdx: number) {\r\n    return (\r\n      <div className=\"card\" key={`card_${cardIdx}`}>\r\n        {\r\n          fields.map((field, fieldIdx) => {\r\n            const value = dataHelpers.extractDataByDataPath(item, field.dataPath, field.name);\r\n            return (\r\n              <div className={`card-row ${field.type}`} key={`card_${cardIdx}_${fieldIdx}`}>\r\n                {\r\n                  field.type !== 'image' &&\r\n                  <label>{field.label || field.name}: </label>\r\n                }\r\n                {renderRow(field, item, value)}\r\n              </div>\r\n            );\r\n          })\r\n        }\r\n        {renderActions(item, cardIdx)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderCardSkeleton(cardIdx: number) {\r\n    return (\r\n      <div className=\"card\" key={`card_${cardIdx}`}>\r\n        {\r\n          fields.map((field, fieldIdx) => {\r\n            return (\r\n              <div className={`card-row ${field.type}`} key={`card_${cardIdx}_${fieldIdx}`}>\r\n                {\r\n                  field.type !== 'image' &&\r\n                  <label>{field.label || field.name}: </label>\r\n                }\r\n                <Skeleton duration={0.6} />\r\n              </div>\r\n            );\r\n          })\r\n        }\r\n        {renderActions({}, cardIdx)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderSkeletons() {\r\n    const startingIndex = items.length;\r\n    const skeletonsIndexes = Array.from(Array(pagination?.limit).keys()).map(value => value + startingIndex);\r\n    return skeletonsIndexes.map(renderCardSkeleton);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      pagination?.type === 'infinite-scroll'\r\n      && document.body.clientHeight <= window.innerHeight\r\n      && callbacks.getNextPage\r\n      && pagination?.hasNextPage\r\n    ) {\r\n      callbacks.getNextPage();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  if (pagination?.type === 'infinite-scroll') {\r\n    return (\r\n      <InfiniteScroll className=\"cards-wrapper\"\r\n        dataLength={items.length}\r\n        next={callbacks.getNextPage || (() => null)}\r\n        hasMore={pagination?.hasNextPage || false}\r\n        loader={renderSkeletons()}\r\n      >\r\n        {items.map(renderCard)}\r\n      </InfiniteScroll>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"cards-wrapper\">\r\n        {items.map(renderCard)}\r\n      </div>\r\n      {\r\n        pagination &&\r\n        pagination.type === 'buttons' &&\r\n        <Pagination\r\n          callbacks={paginationCallbacks}\r\n          pagination={pagination}\r\n        ></Pagination>\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { orderBy } from \"natural-orderby\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport {\r\n  IConfigInputField,\r\n  IConfigOptionSource,\r\n  ICustomLabels,\r\n} from \"../../common/models/config.model\";\r\nimport { Button } from \"../button/button.comp\";\r\nimport { withAppContext } from \"../withContext/withContext.comp\";\r\nimport { IAppContext } from \"../app.context\";\r\nimport { dataHelpers } from \"../../helpers/data.helpers\";\r\nimport locale from \"../../common/locale.js\";\r\n\r\nimport \"./formRow.scss\";\r\n\r\ninterface IProps {\r\n  context: IAppContext;\r\n  field: IConfigInputField;\r\n  onChange: (\r\n    fieldName: string,\r\n    value: any,\r\n    submitAfterChange?: boolean\r\n  ) => void;\r\n  showReset?: boolean;\r\n  direction?: \"row\" | \"column\";\r\n}\r\n\r\nexport const FormRow = withAppContext(\r\n  ({ context, field, direction, showReset, onChange }: IProps) => {\r\n    const [optionSources, setOptionSources] = useState<any>({});\r\n    const { httpService, activePage, config } = context;\r\n    const pageHeaders: any = activePage?.requestHeaders || {};\r\n    const customLabels: ICustomLabels | undefined = {\r\n      ...config?.customLabels,\r\n      ...activePage?.customLabels,\r\n    };\r\n    const addArrayItemLabel = customLabels?.buttons?.addArrayItem || \"Add Item\";\r\n    const clearLabel = customLabels?.buttons?.clearInput || \"Clear\";\r\n\r\n    async function loadOptionSourceFromRemote(\r\n      fieldName: string,\r\n      optionSource: IConfigOptionSource\r\n    ) {\r\n      try {\r\n        const { url, dataPath, actualMethod, requestHeaders } = optionSource;\r\n\r\n        if (!url) {\r\n          throw new Error(\r\n            `URL option source (for field \"${fieldName}\") is empty.`\r\n          );\r\n        }\r\n\r\n        const result = await httpService.fetch({\r\n          method: actualMethod || \"get\",\r\n          origUrl: url,\r\n          queryParams: [],\r\n          headers: Object.assign({}, pageHeaders, requestHeaders || {}),\r\n        });\r\n\r\n        const extractedData = dataHelpers.extractDataByDataPath(\r\n          result,\r\n          dataPath\r\n        );\r\n\r\n        if (!extractedData || !extractedData.length) {\r\n          throw new Error(\r\n            `Option source data is empty (for field \"${fieldName}\")`\r\n          );\r\n        }\r\n\r\n        // Map option source to fields\r\n        const optionSourceData = extractedData.map(\r\n          (option: any, idx: number) => {\r\n            const { valuePath, displayPath } = optionSource;\r\n\r\n            if (typeof option === \"string\") {\r\n              return option;\r\n            }\r\n\r\n            return {\r\n              display:\r\n                displayPath && option[displayPath]\r\n                  ? option[displayPath]\r\n                  : `Option ${idx + 1}`,\r\n              value:\r\n                valuePath && option[valuePath] ? option[valuePath] : `${idx}`,\r\n            };\r\n          }\r\n        );\r\n\r\n        setOptionSources({\r\n          ...optionSources,\r\n          [fieldName]: optionSourceData,\r\n        });\r\n      } catch (e) {\r\n        toast.error(e.message);\r\n      }\r\n    }\r\n\r\n    function addItemToFieldArray(e: any, originalField: IConfigInputField) {\r\n      e.preventDefault();\r\n\r\n      onChange(field.name, [...(originalField.value || []), \"\"]);\r\n    }\r\n\r\n    function removeItemToFieldArray(\r\n      originalField: IConfigInputField,\r\n      idx: number\r\n    ) {\r\n      const updatedArray = [...(originalField.value || [])];\r\n\r\n      updatedArray.splice(idx, 1);\r\n\r\n      onChange(field.name, updatedArray);\r\n    }\r\n\r\n    function renderArrayItems(originalField: IConfigInputField) {\r\n      const array: any[] = originalField.value || [];\r\n\r\n      return (\r\n        <div className=\"array-form\">\r\n          {array.map((item, itemIdx) => {\r\n            const inputField = renderFieldInput(\r\n              {\r\n                value: item,\r\n                name: `${originalField.name}.${itemIdx}`,\r\n              } as IConfigInputField,\r\n              (fieldName, value) => {\r\n                const updatedArray = (originalField.value || []).map(\r\n                  (localValue: any, idx: number) => {\r\n                    if (idx === itemIdx) {\r\n                      return value;\r\n                    }\r\n                    return localValue;\r\n                  }\r\n                );\r\n\r\n                onChange(originalField.name, updatedArray);\r\n              }\r\n            );\r\n\r\n            return (\r\n              <div className=\"array-form-item\" key={`array_form_${itemIdx}`}>\r\n                {inputField}\r\n                <i\r\n                  title={clearLabel}\r\n                  onClick={() => removeItemToFieldArray(originalField, itemIdx)}\r\n                  aria-label=\"Remove\"\r\n                  className=\"clear-input fa fa-times\"\r\n                ></i>\r\n              </div>\r\n            );\r\n          })}\r\n          <Button\r\n            className=\"add-array-item\"\r\n            onClick={(e) => addItemToFieldArray(e, originalField)}\r\n            title={addArrayItemLabel}\r\n          >\r\n            <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\r\n          </Button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    function renderFieldInput(\r\n      field: IConfigInputField,\r\n      changeCallback: (\r\n        fieldName: string,\r\n        value: any,\r\n        submitAfterChange?: boolean\r\n      ) => void\r\n    ) {\r\n      const inputProps = (defaultPlaceholder: string = \"\") => {\r\n        return {\r\n          value: field.value,\r\n          placeholder: field.placeholder || defaultPlaceholder,\r\n          disabled: field.readonly,\r\n          required: field.required,\r\n          onChange: (e: any) => changeCallback(field.name, e.target.value),\r\n        };\r\n      };\r\n\r\n      switch (field.type) {\r\n        case \"boolean\":\r\n          return (\r\n            <input\r\n              type=\"checkbox\"\r\n              {...inputProps()}\r\n              checked={field.value}\r\n              onChange={(e) =>\r\n                changeCallback(field.name, e.target.checked, true)\r\n              }\r\n            />\r\n          );\r\n        case \"select\": {\r\n          const { optionSource } = field;\r\n\r\n          if (optionSource && !optionSources[field.name]) {\r\n            loadOptionSourceFromRemote(field.name, optionSource);\r\n            return (\r\n              <select {...inputProps()}>\r\n                <option>-- Loading Options... --</option>\r\n              </select>\r\n            );\r\n          }\r\n\r\n          const sortBy = field.optionSource?.sortBy;\r\n          const finalOptions: { value: string; display: string }[] =\r\n            optionSources[field.name] || field.options || [];\r\n          const sortedOptions = orderBy(\r\n            finalOptions,\r\n            typeof sortBy === \"string\" ? [sortBy] : sortBy || []\r\n          );\r\n\r\n          return (\r\n            <select {...inputProps()}>\r\n              <option>{locale.select}</option>\r\n              {sortedOptions.map((option, idx) => {\r\n                const key = `option_${idx}_`;\r\n                if (typeof option !== \"object\") {\r\n                  return (\r\n                    <option key={`${key}_${option}`} value={option}>\r\n                      {option}\r\n                    </option>\r\n                  );\r\n                }\r\n                return (\r\n                  <option key={`${key}_${option.value}`} value={option.value}>\r\n                    {option.display || option.value}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n          );\r\n        }\r\n        case \"object\":\r\n          return (\r\n            <textarea\r\n              {...inputProps(\r\n                customLabels?.placeholders?.object || \"Enter JSON...\"\r\n              )}\r\n            ></textarea>\r\n          );\r\n        case \"array\": {\r\n          const { arrayType, value } = field;\r\n          if (!value || !arrayType || arrayType === \"object\") {\r\n            return (\r\n              <textarea\r\n                {...inputProps(\r\n                  customLabels?.placeholders?.array || \"Enter JSON array...\"\r\n                )}\r\n              ></textarea>\r\n            );\r\n          }\r\n          return renderArrayItems(field);\r\n        }\r\n        case \"long-text\":\r\n          return (\r\n            <textarea\r\n              {...inputProps(\r\n                customLabels?.placeholders?.text || locale.enter_text\r\n              )}\r\n            ></textarea>\r\n          );\r\n        case \"number\":\r\n        case \"integer\":\r\n          return (\r\n            <input\r\n              type=\"number\"\r\n              {...inputProps(customLabels?.placeholders?.number || \"0\")}\r\n              onChange={(e) =>\r\n                changeCallback(field.name, e.target.valueAsNumber)\r\n              }\r\n            />\r\n          );\r\n        case \"color\":\r\n          return (\r\n            <input\r\n              type=\"color\"\r\n              {...inputProps(\r\n                customLabels?.placeholders?.color || \"Enter color...\"\r\n              )}\r\n            />\r\n          );\r\n        case \"email\":\r\n          return (\r\n            <input\r\n              type=\"email\"\r\n              {...inputProps(\r\n                customLabels?.placeholders?.email || \"Enter email...\"\r\n              )}\r\n            />\r\n          );\r\n        case \"password\":\r\n          return (\r\n            <input\r\n              type=\"password\"\r\n              {...inputProps(\r\n                customLabels?.placeholders?.password || \"Enter password...\"\r\n              )}\r\n            />\r\n          );\r\n        case \"hidden\":\r\n          return <input type=\"hidden\" value={field.value} />;\r\n        case \"file\":\r\n          return (\r\n            <input\r\n              type=\"file\"\r\n              accept={field.accept || \"*\"}\r\n              placeholder={\r\n                field.placeholder ||\r\n                customLabels?.placeholders?.file ||\r\n                \"Select file...\"\r\n              }\r\n              name={field.name || \"file\"}\r\n              disabled={field.readonly}\r\n              required={field.required}\r\n            />\r\n          );\r\n        case \"note\":\r\n          return <p className=\"note\">{field.value}</p>;\r\n        case \"date\":\r\n          return (\r\n            <input\r\n              type=\"date\"\r\n              {...inputProps(\r\n                customLabels?.placeholders?.date || \"Enter date...\"\r\n              )}\r\n            />\r\n          );\r\n        case \"text\":\r\n        default:\r\n          return (\r\n            <input\r\n              type=\"text\"\r\n              {...inputProps(\r\n                customLabels?.placeholders?.text || locale.enter_text\r\n              )}\r\n            />\r\n          );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className={`form-row ${direction || \"row\"}`}>\r\n        {field.type !== \"hidden\" && (\r\n          <label>\r\n            {field.label || field.originalName}\r\n            {field.required ? \" *\" : \"\"}\r\n          </label>\r\n        )}\r\n        {renderFieldInput(field, onChange)}\r\n        {showReset &&\r\n          !field.readonly &&\r\n          field.value &&\r\n          field.value.length > 0 && (\r\n            <i\r\n              title={clearLabel}\r\n              onClick={() => onChange(field.name, \"\", true)}\r\n              aria-label=\"Clear\"\r\n              className=\"clear-input fa fa-times\"\r\n            ></i>\r\n          )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  IConfigInputField,\r\n  IConfigPagination,\r\n} from \"../../common/models/config.model\";\r\nimport { FormRow } from \"../formRow/formRow.comp\";\r\nimport { Button } from \"../button/button.comp\";\r\nimport locale from \"../../common/locale.js\";\r\n\r\nimport \"./queryParams.scss\";\r\n\r\ninterface IProps {\r\n  initialParams: IConfigInputField[];\r\n  paginationConfig?: IConfigPagination;\r\n  submitCallback: (queryParams: IConfigInputField[], reset?: boolean) => void;\r\n}\r\n\r\nexport const QueryParams = ({\r\n  initialParams,\r\n  paginationConfig,\r\n  submitCallback,\r\n}: IProps) => {\r\n  const [queryParams, setQueryParams] = useState<IConfigInputField[]>(\r\n    initialParams\r\n  );\r\n\r\n  function submit(e?: any) {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n    if (paginationConfig && paginationConfig.type === \"infinite-scroll\") {\r\n      submitCallback(queryParams, true);\r\n    } else {\r\n      submitCallback(queryParams);\r\n    }\r\n  }\r\n\r\n  function formChanged(\r\n    fieldName: string,\r\n    value: any,\r\n    submitAfterChange?: boolean\r\n  ) {\r\n    const updatedQueryParams: IConfigInputField[] = [...queryParams].map(\r\n      (field) => {\r\n        if (field.name === fieldName) {\r\n          field.value = value;\r\n        }\r\n        return field;\r\n      }\r\n    );\r\n    setQueryParams(updatedQueryParams);\r\n    if (submitAfterChange) {\r\n      submit();\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (paginationConfig && paginationConfig.type === \"infinite-scroll\") {\r\n      const filteredParams = initialParams.filter(\r\n        (param) => ![\"page\", \"limit\"].includes(param.name)\r\n      );\r\n      setQueryParams(filteredParams);\r\n    } else {\r\n      setQueryParams(initialParams);\r\n    }\r\n  }, [paginationConfig, initialParams]);\r\n  if (!queryParams.length) {\r\n    return <React.Fragment></React.Fragment>;\r\n  }\r\n\r\n  return (\r\n    <section className=\"query-params-form\">\r\n      <h5>{locale.search}</h5>\r\n      <form onSubmit={submit}>\r\n        {queryParams.map((queryParam, idx) => {\r\n          //if(queryParam.name == 'page') return \"\";\r\n          //if (queryParam.hidden) return \"\";\r\n          return (\r\n            <FormRow\r\n              key={`query_param_${idx}`}\r\n              field={queryParam}\r\n              onChange={formChanged}\r\n              showReset={!queryParam.type || queryParam.type === \"text\"}\r\n            />\r\n          );\r\n        })}\r\n        <Button type=\"submit\" onClick={submit}>\r\n          {locale.submit}\r\n        </Button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n","import React, { Component, RefObject, ReactChild } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './popup.scss';\r\nimport { ICustomLabels } from '../../common/models/config.model';\r\n\r\ninterface IPopupProps {\r\n  className?: string\r\n  style?: any\r\n  show: boolean\r\n  closeCallback: any\r\n  children: ReactChild\r\n  refCallback?: string | ((instance: HTMLDivElement | null) => void) | RefObject<HTMLDivElement> | null | undefined\r\n  customLabels?: ICustomLabels\r\n}\r\n\r\nlet portalRoot: HTMLDivElement = document.getElementById('popup-portal') as HTMLDivElement;\r\nif (!portalRoot) {\r\n  portalRoot = document.createElement('div');\r\n  portalRoot.setAttribute('id', 'popup-portal');\r\n  document.body.append(portalRoot);\r\n}\r\n\r\nclass PortalPopup extends Component {\r\n  private el: HTMLElement;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.el = document.createElement('div');\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    portalRoot.appendChild(this.el);\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    portalRoot.removeChild(this.el);\r\n  }\r\n\r\n  render() {\r\n    return ReactDOM.createPortal(this.props.children, this.el);\r\n  }\r\n}\r\n\r\nexport class Popup extends Component<IPopupProps> {\r\n  render() {\r\n    const style: any = Object.assign({}, { display: this.props.show ? 'block' : 'none' }, this.props.style || {});\r\n    const closeLabel = this.props.customLabels?.buttons?.closeForm || 'Close';\r\n\r\n    return (\r\n      <PortalPopup>\r\n        {\r\n          this.props.show ?\r\n            <div className={`popup ${this.props.className || ''}`} style={style}>\r\n              <div className=\"overlay\" onClick={(e: any) => this.props.closeCallback(e)}></div>\r\n              <div className=\"popup-content\" ref={this.props.refCallback}>\r\n                {this.props.children}\r\n                <button title={closeLabel} className=\"close-popup\" onClick={(e: any) => this.props.closeCallback(e)}>\r\n                  <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n                </button>\r\n              </div>\r\n            </div> :\r\n            null\r\n        }\r\n      </PortalPopup>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('keydown', this._handleKeyDown.bind(this));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('keydown', this._handleKeyDown.bind(this));\r\n  }\r\n\r\n  _handleKeyDown = (e: KeyboardEvent) => {\r\n    const { show, closeCallback } = this.props;\r\n\r\n    if (show && e.keyCode === 27) {\r\n      closeCallback(e);\r\n    }\r\n  }\r\n};","import { IConfigInputField } from '../common/models/config.model';\r\n\r\nclass FileHelpers {\r\n\r\n  public isMultipartForm(fields: IConfigInputField[]): boolean {\r\n    for (const fieldIndex in fields) {\r\n      let field = fields[fieldIndex];\r\n\r\n      if (field.type === 'file') {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  \r\n}\r\n\r\nexport const fileHelpers = new FileHelpers();","import React, { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { Popup } from \"../popup/popup.comp\";\r\nimport {\r\n  IConfigInputField,\r\n  IConfigGetSingleMethod,\r\n  IConfigPostMethod,\r\n  IConfigPutMethod,\r\n  ICustomLabels,\r\n  IQueryParam,\r\n} from \"../../common/models/config.model\";\r\nimport { FormRow } from \"../formRow/formRow.comp\";\r\nimport { Button } from \"../button/button.comp\";\r\nimport { Loader } from \"../loader/loader.comp\";\r\nimport { dataHelpers } from \"../../helpers/data.helpers\";\r\nimport { fileHelpers } from \"../../helpers/file.helpers\";\r\nimport { IAppContext } from \"../app.context\";\r\nimport { withAppContext } from \"../withContext/withContext.comp\";\r\nimport locale from \"../../common/locale\";\r\n\r\nimport \"./formPopup.scss\";\r\n\r\nconst unflatten = require(\"flat\").unflatten;\r\n\r\ninterface IProps {\r\n  context: IAppContext;\r\n  title: string;\r\n  fields: IConfigInputField[];\r\n  rawData?: any;\r\n  getSingleConfig?: IConfigGetSingleMethod;\r\n  methodConfig: IConfigPostMethod | IConfigPutMethod;\r\n  closeCallback: (reloadData: boolean) => void;\r\n  submitCallback: (\r\n    body: any,\r\n    containFiles: boolean,\r\n    queryParams: IQueryParam[]\r\n  ) => void;\r\n}\r\n\r\nexport const FormPopup = withAppContext(\r\n  ({\r\n    context,\r\n    title,\r\n    fields,\r\n    rawData,\r\n    getSingleConfig,\r\n    methodConfig,\r\n    submitCallback,\r\n    closeCallback,\r\n  }: IProps) => {\r\n    const fieldsCopy: IConfigInputField[] = JSON.parse(JSON.stringify(fields));\r\n    const { httpService, activePage, config } = context;\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n    const [formFields, setFormFields] = useState<IConfigInputField[]>([]);\r\n    const [finalRawData, setFinalRawData] = useState<any>(null);\r\n    const pageHeaders: any = activePage?.requestHeaders || {};\r\n    const customLabels: ICustomLabels | undefined = {\r\n      ...config?.customLabels,\r\n      ...activePage?.customLabels,\r\n    };\r\n\r\n    async function initFormFields() {\r\n      let finalRawData: any = rawData || {};\r\n\r\n      if (getSingleConfig && getSingleConfig.url) {\r\n        try {\r\n          const {\r\n            url,\r\n            requestHeaders,\r\n            actualMethod,\r\n            dataPath,\r\n            queryParams,\r\n            responseType,\r\n            dataTransform,\r\n          } = getSingleConfig;\r\n          const result = await httpService.fetch({\r\n            method: actualMethod || \"get\",\r\n            origUrl: url,\r\n            queryParams,\r\n            headers: Object.assign({}, pageHeaders, requestHeaders || {}),\r\n            rawData,\r\n            responseType,\r\n          });\r\n\r\n          let extractedData = dataHelpers.extractDataByDataPath(\r\n            result,\r\n            dataPath\r\n          );\r\n\r\n          if (typeof dataTransform === \"function\") {\r\n            extractedData = await dataTransform(extractedData);\r\n          }\r\n\r\n          if (\r\n            extractedData &&\r\n            (typeof extractedData === \"object\" ||\r\n              typeof extractedData === \"string\")\r\n          ) {\r\n            finalRawData = extractedData;\r\n          }\r\n        } catch (e) {\r\n          console.error(\"Could not load single item's data.\", e);\r\n          toast.error(\"Could not load single item's data.\");\r\n        }\r\n      }\r\n\r\n      setFinalRawData(finalRawData); // Store the raw data for later.\r\n\r\n      setFormFields(\r\n        fieldsCopy.map((field) => {\r\n          let key = field.name;\r\n\r\n          field.originalName = field.name;\r\n\r\n          let dataPathSplit: string[] = [];\r\n\r\n          if (field.dataPath) {\r\n            dataPathSplit = field.dataPath.split(\".\");\r\n            key = `${field.dataPath}.${field.name}`;\r\n          }\r\n\r\n          const lookup = () => {\r\n            let objToLookIn = finalRawData;\r\n            for (const pathElem of dataPathSplit) {\r\n              if (\r\n                objToLookIn[pathElem] !== undefined &&\r\n                objToLookIn[pathElem] !== null\r\n              ) {\r\n                objToLookIn = objToLookIn[pathElem];\r\n              } else {\r\n                return undefined;\r\n              }\r\n            }\r\n            return objToLookIn[field.name];\r\n          };\r\n\r\n          const lookupValue = lookup();\r\n\r\n          // Changing field name to include datapath\r\n          // This will use us later for unflatten the final object\r\n          field.name = key;\r\n\r\n          if (dataHelpers.checkIfFieldIsObject(field)) {\r\n            if (lookupValue || field.value) {\r\n              field.value =\r\n                JSON.stringify(lookupValue || field.value, null, \"  \") || \"\";\r\n            }\r\n            return field;\r\n          }\r\n\r\n          if (field.type === \"array\") {\r\n            field.value = lookupValue || field.value || [];\r\n            return field;\r\n          }\r\n\r\n          if (typeof lookupValue !== \"undefined\") {\r\n            field.value = lookupValue;\r\n          } else {\r\n            // important in order to prevent controlled / uncontrolled components error\r\n            field.value = typeof field.value === \"undefined\" ? \"\" : field.value;\r\n          }\r\n\r\n          if (\r\n            (field.type === \"long-text\" || field.type === \"text\") &&\r\n            typeof finalRawData === \"string\"\r\n          ) {\r\n            field.value = finalRawData;\r\n          }\r\n\r\n          return field;\r\n        })\r\n      );\r\n\r\n      setLoading(false);\r\n    }\r\n\r\n    async function submitForm(e: any) {\r\n      e.preventDefault();\r\n\r\n      const finalObject: any = (methodConfig as IConfigPutMethod)\r\n        .includeOriginalFields\r\n        ? Object.assign({}, finalRawData)\r\n        : {};\r\n      const formData = new FormData();\r\n      const containFiles: boolean = fileHelpers.isMultipartForm(formFields);\r\n      let validationError = null;\r\n\r\n      var queryParams: IQueryParam[] = [];\r\n\r\n      formFields.forEach((field) => {\r\n        if (field.type === \"file\") {\r\n          const fileInput: any = document.querySelector(\r\n            `input[name=\"${field.name || \"file\"}\"]`\r\n          ) as HTMLInputElement;\r\n\r\n          if (fileInput.files.length > 0) {\r\n            const firstFile = fileInput.files[0];\r\n            formData.append(field.name || \"file\", firstFile, firstFile.name);\r\n          }\r\n          return;\r\n        }\r\n\r\n        finalObject[field.name] = field.value;\r\n\r\n        if (containFiles && !field.useInUrl) {\r\n          formData.append(field.name, field.value);\r\n        }\r\n\r\n        // eslint-disable-next-line eqeqeq\r\n        if (\r\n          field.required &&\r\n          field.type !== \"boolean\" &&\r\n          !field.value &&\r\n          field.value != 0\r\n        ) {\r\n          validationError = \"Please fill up all required fields.\";\r\n        }\r\n\r\n        if (dataHelpers.checkIfFieldIsObject(field) && field.value) {\r\n          try {\r\n            finalObject[field.name] = JSON.parse(field.value);\r\n          } catch (e) {\r\n            validationError = `Invalid JSON for field \"${field.name}\".`;\r\n          }\r\n        }\r\n\r\n        if (field.type === \"boolean\") {\r\n          finalObject[field.name] = field.value || false;\r\n        }\r\n\r\n        if (field.type === \"encode\") {\r\n          finalObject[field.name] = encodeURIComponent(field.value);\r\n        }\r\n\r\n        if (field.useInUrl) {\r\n          queryParams.push({ name: field.name, value: field.value });\r\n        }\r\n      });\r\n\r\n      if (validationError) {\r\n        toast.error(validationError);\r\n        return;\r\n      }\r\n\r\n      setLoading(true);\r\n\r\n      try {\r\n        const body = containFiles ? formData : unflatten(finalObject);\r\n        await submitCallback(body, containFiles, queryParams);\r\n\r\n        toast.success(\"Great Success!\");\r\n\r\n        closeCallback(true);\r\n      } catch (e) {\r\n        toast.error(e.message);\r\n      }\r\n\r\n      setLoading(false);\r\n    }\r\n\r\n    function formChanged(fieldName: string, value: any) {\r\n      let updatedFormFields: IConfigInputField[] = JSON.parse(\r\n        JSON.stringify(formFields)\r\n      );\r\n\r\n      updatedFormFields = updatedFormFields.map((field: IConfigInputField) => {\r\n        if (field.name === fieldName) {\r\n          field.value = value;\r\n        }\r\n\r\n        return field;\r\n      });\r\n\r\n      setFormFields(updatedFormFields);\r\n    }\r\n\r\n    useEffect(() => {\r\n      initFormFields();\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    return (\r\n      <Popup\r\n        show={true}\r\n        className=\"form-popup\"\r\n        closeCallback={() => closeCallback(false)}\r\n        customLabels={customLabels}\r\n      >\r\n        <React.Fragment>\r\n          <h2>{title}</h2>\r\n          <section>\r\n            {loading ? (\r\n              <Loader />\r\n            ) : (\r\n              <form onSubmit={submitForm}>\r\n                {formFields.map((field, idx) => {\r\n                  return (\r\n                    <div>\r\n                      <FormRow\r\n                        key={`field_${idx}`}\r\n                        field={field}\r\n                        onChange={formChanged}\r\n                        showReset={!field.type || field.type === \"text\"}\r\n                      />\r\n                      <br />\r\n                      <hr />\r\n                    </div>\r\n                  );\r\n                })}\r\n                <div className=\"buttons-wrapper center\">\r\n                  <Button type=\"submit\" onClick={submitForm} color=\"green\">\r\n                    {locale.submit}\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            )}\r\n          </section>\r\n        </React.Fragment>\r\n      </Popup>\r\n    );\r\n  }\r\n);\r\n","import React from 'react';\r\n\r\nimport './filterField.scss';\r\n\r\ninterface IProps {\r\n  onChange: (filter: string) => void\r\n}\r\n\r\nexport const FilterField = ({ onChange }: IProps) => {\r\n  return (\r\n    <section className=\"filter-wrapper\">\r\n      <h5>Filter:</h5>\r\n      <div className=\"form-row\">\r\n        <input type=\"text\" placeholder=\"Search...\" onChange={(e) => onChange(e.target.value.toLowerCase())} />\r\n      </div>\r\n    </section>\r\n  );\r\n};","import { IPaginationState, IQueryPaginationState, IBodyPaginationState } from \"./states.model\";\r\n\r\nexport const isQueryPaginationState = (obj: IPaginationState): obj is IQueryPaginationState => {\r\n    return obj.source === 'query';\r\n}\r\n\r\nexport const isBodyPaginationState = (obj: IPaginationState): obj is IBodyPaginationState => {\r\n    return obj.source === 'body';\r\n}","import { IConfigPagination, IConfigBodyPagination, IConfigQueryPagination } from \"./config.model\";\r\n\r\nexport const isQueryPagination = (obj: IConfigPagination): obj is IConfigQueryPagination => {\r\n    return obj.source === 'query';\r\n}\r\n\r\nexport const isBodyPagination = (obj: IConfigPagination): obj is IConfigBodyPagination => {\r\n    return obj.source === 'body';\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { Popup } from \"../popup/popup.comp\";\r\nimport {\r\n  IConfigInputField,\r\n  IConfigGetSingleMethod,\r\n  IConfigPostMethod,\r\n  IConfigPutMethod,\r\n  ICustomLabels,\r\n  IQueryParam,\r\n  IConfigGetAllMethod,\r\n  IConfigGraphMethod,\r\n} from \"../../common/models/config.model\";\r\nimport { FormRow } from \"../formRow/formRow.comp\";\r\nimport { Button } from \"../button/button.comp\";\r\nimport { Loader } from \"../loader/loader.comp\";\r\nimport { dataHelpers } from \"../../helpers/data.helpers\";\r\nimport { fileHelpers } from \"../../helpers/file.helpers\";\r\nimport { IAppContext } from \"../app.context\";\r\nimport { withAppContext } from \"../withContext/withContext.comp\";\r\nimport locale from \"../../common/locale\";\r\n\r\nimport \"./graphPopup.scss\";\r\n\r\nconst unflatten = require(\"flat\").unflatten;\r\n\r\ninterface IProps {\r\n  context: IAppContext;\r\n  title: string;\r\n  fields: IConfigInputField[];\r\n  rawData?: any;\r\n  getAllConfig?: IConfigGetAllMethod;\r\n  methodConfig: IConfigGraphMethod;\r\n  closeCallback: (reloadData: boolean) => void;\r\n}\r\n\r\nexport const GraphPopup = withAppContext(\r\n  ({\r\n    context,\r\n    title,\r\n    fields,\r\n    rawData,\r\n    getAllConfig,\r\n    methodConfig,\r\n    closeCallback,\r\n  }: IProps) => {\r\n    const fieldsCopy: IConfigInputField[] = JSON.parse(JSON.stringify(fields));\r\n    const { httpService, activePage, config } = context;\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n    const [formFields, setFormFields] = useState<IConfigInputField[]>([]);\r\n    const [finalRawData, setFinalRawData] = useState<any>(null);\r\n    const pageHeaders: any = activePage?.requestHeaders || {};\r\n    const customLabels: ICustomLabels | undefined = {\r\n      ...config?.customLabels,\r\n      ...activePage?.customLabels,\r\n    };\r\n\r\n    async function initFormFields() {\r\n      let finalRawData: any = rawData || {};\r\n\r\n      if (getAllConfig && getAllConfig.url) {\r\n        try {\r\n          const {\r\n            url,\r\n            requestHeaders,\r\n            actualMethod,\r\n            dataPath,\r\n            queryParams,\r\n            dataTransform,\r\n          } = getAllConfig;\r\n          const result = await httpService.fetch({\r\n            method: \"get\",\r\n            origUrl: url,\r\n            queryParams,\r\n            headers: Object.assign({}, pageHeaders, requestHeaders || {}),\r\n            rawData,\r\n          });\r\n\r\n          let extractedData = dataHelpers.extractDataByDataPath(\r\n            result,\r\n            dataPath\r\n          );\r\n\r\n          if (typeof dataTransform === \"function\") {\r\n            extractedData = await dataTransform(extractedData);\r\n          }\r\n\r\n          if (\r\n            extractedData &&\r\n            (typeof extractedData === \"object\" ||\r\n              typeof extractedData === \"string\")\r\n          ) {\r\n            finalRawData = extractedData;\r\n          }\r\n        } catch (e) {\r\n          console.error(\"Could not load single item's data.\", e);\r\n          toast.error(\"Could not load single item's data.\");\r\n        }\r\n      }\r\n\r\n      setFinalRawData(finalRawData); // Store the raw data for later.\r\n\r\n      setFormFields(\r\n        fieldsCopy.map((field) => {\r\n          let key = field.name;\r\n\r\n          field.originalName = field.name;\r\n\r\n          let dataPathSplit: string[] = [];\r\n\r\n          if (field.dataPath) {\r\n            dataPathSplit = field.dataPath.split(\".\");\r\n            key = `${field.dataPath}.${field.name}`;\r\n          }\r\n\r\n          const lookup = () => {\r\n            let objToLookIn = finalRawData;\r\n            for (const pathElem of dataPathSplit) {\r\n              if (\r\n                objToLookIn[pathElem] !== undefined &&\r\n                objToLookIn[pathElem] !== null\r\n              ) {\r\n                objToLookIn = objToLookIn[pathElem];\r\n              } else {\r\n                return undefined;\r\n              }\r\n            }\r\n            return objToLookIn[field.name];\r\n          };\r\n\r\n          const lookupValue = lookup();\r\n\r\n          // Changing field name to include datapath\r\n          // This will use us later for unflatten the final object\r\n          field.name = key;\r\n\r\n          if (dataHelpers.checkIfFieldIsObject(field)) {\r\n            if (lookupValue || field.value) {\r\n              field.value =\r\n                JSON.stringify(lookupValue || field.value, null, \"  \") || \"\";\r\n            }\r\n            return field;\r\n          }\r\n\r\n          if (field.type === \"array\") {\r\n            field.value = lookupValue || field.value || [];\r\n            return field;\r\n          }\r\n\r\n          if (typeof lookupValue !== \"undefined\") {\r\n            field.value = lookupValue;\r\n          } else {\r\n            // important in order to prevent controlled / uncontrolled components error\r\n            field.value = typeof field.value === \"undefined\" ? \"\" : field.value;\r\n          }\r\n\r\n          if (\r\n            (field.type === \"long-text\" || field.type === \"text\") &&\r\n            typeof finalRawData === \"string\"\r\n          ) {\r\n            field.value = finalRawData;\r\n          }\r\n\r\n          return field;\r\n        })\r\n      );\r\n\r\n      setLoading(false);\r\n    }\r\n\r\n    function formChanged(fieldName: string, value: any) {\r\n      let updatedFormFields: IConfigInputField[] = JSON.parse(\r\n        JSON.stringify(formFields)\r\n      );\r\n\r\n      updatedFormFields = updatedFormFields.map((field: IConfigInputField) => {\r\n        if (field.name === fieldName) {\r\n          field.value = value;\r\n        }\r\n\r\n        return field;\r\n      });\r\n\r\n      setFormFields(updatedFormFields);\r\n    }\r\n\r\n    function submitForm() {}\r\n\r\n    useEffect(() => {\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n\r\n      setLoading(false);\r\n    }, []);\r\n\r\n    return (\r\n      <Popup\r\n        show={true}\r\n        className=\"graph-popup\"\r\n        closeCallback={() => closeCallback(false)}\r\n        customLabels={customLabels}\r\n      >\r\n        <React.Fragment>\r\n          <h2>{title}</h2>\r\n\r\n          {loading ? (\r\n            <Loader />\r\n          ) : (\r\n            <section className=\"query-params-form\">\r\n              <h5>{locale.search}</h5>\r\n              <form onSubmit={submitForm}>\r\n                {fieldsCopy.map((queryParam, idx) => {\r\n                  return (\r\n                    <FormRow\r\n                      key={`query_param_${idx}`}\r\n                      field={queryParam}\r\n                      onChange={formChanged}\r\n                      showReset={!queryParam.type || queryParam.type === \"text\"}\r\n                    />\r\n                  );\r\n                })}\r\n                <Button type=\"submit\" onClick={submitForm}>\r\n                  {locale.submit}\r\n                </Button>\r\n              </form>\r\n            </section>\r\n          )}\r\n        </React.Fragment>\r\n      </Popup>\r\n    );\r\n  }\r\n);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport * as QueryString from \"query-string\";\r\nimport { toast } from \"react-toastify\";\r\nimport { orderBy } from \"natural-orderby\";\r\nimport { find, remove } from \"lodash\";\r\n\r\nimport { IAppContext } from \"../app.context\";\r\nimport {\r\n  IConfigPage,\r\n  IConfigMethods,\r\n  IConfigGetAllMethod,\r\n  IConfigPostMethod,\r\n  IConfigPutMethod,\r\n  IConfigDeleteMethod,\r\n  IConfigInputField,\r\n  IConfigCustomAction,\r\n  IConfigGetSingleMethod,\r\n  ICustomLabels,\r\n  IConfigPagination,\r\n  IConfigGraphMethod,\r\n} from \"../../common/models/config.model\";\r\nimport {\r\n  IPaginationState,\r\n  IQueryPaginationState,\r\n  IBodyPaginationState,\r\n} from \"../../common/models/states.model\";\r\nimport { withAppContext } from \"../withContext/withContext.comp\";\r\nimport { Loader } from \"../loader/loader.comp\";\r\nimport { dataHelpers } from \"../../helpers/data.helpers\";\r\nimport { paginationHelpers } from \"../../helpers/pagination.helpers\";\r\nimport { Table } from \"../table/table.comp\";\r\nimport { Cards } from \"../cards/cards.comp\";\r\nimport { QueryParams } from \"../queryParams/queryParams.comp\";\r\nimport { Button } from \"../button/button.comp\";\r\nimport { FormPopup } from \"../formPopup/formPopup.comp\";\r\nimport { FilterField } from \"../filterField/filterField.comp\";\r\nimport {\r\n  isQueryPaginationState,\r\n  isBodyPaginationState,\r\n} from \"../../common/models/states.types.helper\";\r\nimport {\r\n  isQueryPagination,\r\n  isBodyPagination,\r\n} from \"../../common/models/config.types.helper\";\r\nimport locale from \"../../common/locale.js\";\r\n\r\nimport \"./page.scss\";\r\nimport { GraphPopup } from \"../graphPopup/graphPopup.comp\";\r\n\r\ninterface IProps {\r\n  context: IAppContext;\r\n}\r\n\r\ninterface IPopupProps {\r\n  type: \"add\" | \"update\" | \"action\";\r\n  title: string;\r\n  config: IConfigPostMethod | IConfigPutMethod;\r\n  submitCallback: (body: any, containFiles: boolean) => void;\r\n  getSingleConfig?: IConfigGetSingleMethod;\r\n  rawData?: {};\r\n}\r\n\r\ninterface IGraphProps {\r\n  title: string;\r\n  config: IConfigGraphMethod;\r\n  getAllConfig?: IConfigGetAllMethod;\r\n  rawData?: {};\r\n}\r\n\r\nconst buildInitQueryParamsAndPaginationState = (\r\n  initQueryParams: IConfigInputField[],\r\n  paginationConfig?: IConfigPagination\r\n): {\r\n  initQueryParams: IConfigInputField[];\r\n  initialPagination?: IPaginationState;\r\n} => {\r\n  let initialPagination: IPaginationState | undefined = undefined;\r\n\r\n  if (paginationConfig) {\r\n    if (isQueryPagination(paginationConfig)) {\r\n      initialPagination = {\r\n        source: paginationConfig.source,\r\n        type: paginationConfig.type,\r\n        page: parseInt(paginationConfig.params?.page?.value || \"1\"),\r\n        limit: parseInt(paginationConfig.params?.limit?.value || \"10\"),\r\n        descending:\r\n          paginationConfig.params?.descending?.value === \"true\" || false,\r\n        hasPreviousPage: false,\r\n        hasNextPage: false,\r\n        sortBy: paginationConfig.params?.sortBy?.value,\r\n      };\r\n\r\n      if (!find(initQueryParams, { name: \"page\" })) {\r\n        initQueryParams.push({\r\n          name: paginationConfig?.params?.page?.name,\r\n          label: paginationConfig?.params?.page?.label || \"Page\",\r\n          value: initialPagination?.page,\r\n        });\r\n      }\r\n\r\n      if (\r\n        paginationConfig?.params?.limit &&\r\n        !find(initQueryParams, { name: \"limit\" })\r\n      ) {\r\n        initQueryParams.push({\r\n          name: paginationConfig.params.limit.name,\r\n          label: paginationConfig.params.limit.label || \"Limit\",\r\n          value: initialPagination?.limit,\r\n        });\r\n      }\r\n\r\n      if (\r\n        paginationConfig?.params?.descending &&\r\n        !find(initQueryParams, { name: \"descending\" })\r\n      ) {\r\n        initQueryParams.push({\r\n          name: paginationConfig.params.descending.name,\r\n          label: paginationConfig.params.descending.label || \"Descending\",\r\n          value: initialPagination?.descending,\r\n        });\r\n      }\r\n\r\n      if (\r\n        paginationConfig?.params?.sortBy &&\r\n        !find(initQueryParams, { name: \"sortBy\" })\r\n      ) {\r\n        initQueryParams.push({\r\n          name: paginationConfig.params.sortBy.name,\r\n          label: \"Sort by\",\r\n          value: initialPagination?.sortBy,\r\n        });\r\n      }\r\n    } else if (isBodyPagination(paginationConfig)) {\r\n      initialPagination = {\r\n        source: \"body\",\r\n        type: paginationConfig.type,\r\n        hasNextPage: false,\r\n        hasPreviousPage: false,\r\n        next: null,\r\n        previous: null,\r\n        limit: parseInt(paginationConfig.params?.limit?.value || \"10\"),\r\n      };\r\n\r\n      if (\r\n        paginationConfig?.params?.limit &&\r\n        !find(initQueryParams, { name: \"limit\" })\r\n      ) {\r\n        initQueryParams.push({\r\n          name: paginationConfig.params.limit.name,\r\n          label: paginationConfig.params.limit.label || \"Limit\",\r\n          value: initialPagination?.limit,\r\n        });\r\n      }\r\n    } else {\r\n      throw new Error(\"unrecognized pagination\");\r\n    }\r\n  }\r\n\r\n  return {\r\n    initQueryParams,\r\n    initialPagination,\r\n  };\r\n};\r\n\r\nconst PageComp = ({ context }: IProps) => {\r\n  const { page }: any = useParams();\r\n  const { push, location } = useHistory();\r\n  const { activePage, error, setError, httpService, config } = context;\r\n  const pageHeaders: any = activePage?.requestHeaders || {};\r\n  const pageMethods: IConfigMethods | undefined = activePage?.methods;\r\n  const customActions: IConfigCustomAction[] = activePage?.customActions || [];\r\n  const getAllConfig: IConfigGetAllMethod | undefined = pageMethods?.getAll;\r\n  const paginationConfig = getAllConfig?.pagination;\r\n  const infiniteScroll = paginationConfig?.type === \"infinite-scroll\";\r\n  const getSingleConfig: IConfigGetSingleMethod | undefined =\r\n    pageMethods?.getSingle;\r\n  const postConfig: IConfigPostMethod | undefined = pageMethods?.post;\r\n  const graphConfig: IConfigGraphMethod | undefined = pageMethods?.graph;\r\n  const putConfig: IConfigPutMethod | undefined = pageMethods?.put;\r\n  const deleteConfig: IConfigDeleteMethod | undefined = pageMethods?.delete;\r\n  const customLabels: ICustomLabels | undefined = {\r\n    ...config?.customLabels,\r\n    ...activePage?.customLabels,\r\n  };\r\n  const addItemLabel =\r\n    customLabels?.buttons?.addItem ||\r\n    \"+ \" + locale.add + \" \" + activePage?.itemName;\r\n  const openGraphLabel = locale.graph + \" \" + activePage?.itemName;\r\n  const addItemFormTitle =\r\n    customLabels?.formTitles?.addItem ||\r\n    locale.add + \" \" + activePage?.itemName;\r\n  const editItemFormTitle =\r\n    customLabels?.formTitles?.editItem ||\r\n    locale.update + \" \" + activePage?.itemName;\r\n  const graphTitle = locale.graph + \" \" + activePage?.itemName;\r\n  const {\r\n    initQueryParams,\r\n    initialPagination,\r\n  } = buildInitQueryParamsAndPaginationState(\r\n    getAllConfig?.queryParams || [],\r\n    paginationConfig\r\n  );\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [openedPopup, setOpenedPopup] = useState<null | IPopupProps>(null);\r\n  const [openedGraph, setOpenedGraph] = useState<null | IGraphProps>(null);\r\n  const [queryParams, setQueryParams] = useState<IConfigInputField[]>(\r\n    initQueryParams\r\n  );\r\n  const [pagination, setPagination] = useState<IPaginationState | undefined>(\r\n    initialPagination\r\n  );\r\n  const [items, setItems] = useState<any[]>([]);\r\n  const [filter, setFilter] = useState<string>(\"\");\r\n\r\n  function closeFormPopup(refreshData: boolean = false) {\r\n    setOpenedPopup(null);\r\n\r\n    if (refreshData === true) {\r\n      if (pagination?.type === \"infinite-scroll\") {\r\n        setItems([]);\r\n        const updatedParams = [...queryParams];\r\n        remove(updatedParams, (param) =>\r\n          [\"page\", \"limit\"].includes(param.name)\r\n        );\r\n        setQueryParams(\r\n          buildInitQueryParamsAndPaginationState(\r\n            updatedParams,\r\n            paginationConfig\r\n          ).initQueryParams\r\n        );\r\n      } else {\r\n        getAllRequest();\r\n      }\r\n    }\r\n  }\r\n\r\n  function closeGraph(refreshData: boolean = false) {\r\n    setOpenedGraph(null);\r\n\r\n    if (refreshData === true) {\r\n      if (pagination?.type === \"infinite-scroll\") {\r\n        setItems([]);\r\n        const updatedParams = [...queryParams];\r\n        remove(updatedParams, (param) =>\r\n          [\"page\", \"limit\"].includes(param.name)\r\n        );\r\n        setQueryParams(\r\n          buildInitQueryParamsAndPaginationState(\r\n            updatedParams,\r\n            paginationConfig\r\n          ).initQueryParams\r\n        );\r\n      } else {\r\n        getAllRequest();\r\n      }\r\n    }\r\n  }\r\n\r\n  async function openEditPopup(rawData: any) {\r\n    const params: IPopupProps = {\r\n      rawData,\r\n      type: \"update\",\r\n      title: editItemFormTitle,\r\n      config: putConfig as IConfigPutMethod,\r\n      getSingleConfig,\r\n      submitCallback: async (body: any, containFiles: boolean) => {\r\n        return await updateItem(body, rawData, containFiles);\r\n      },\r\n    };\r\n\r\n    setOpenedPopup(params);\r\n  }\r\n\r\n  function openCustomActionPopup(rawData: any, action: IConfigCustomAction) {\r\n    const params: IPopupProps = {\r\n      rawData,\r\n      type: \"action\",\r\n      title: action.name || \"Custom Action\",\r\n      config: action as IConfigCustomAction,\r\n      submitCallback: async (body: any, containFiles: boolean) => {\r\n        return await performAction(body, rawData, action, containFiles);\r\n      },\r\n    };\r\n    setOpenedPopup(params);\r\n  }\r\n\r\n  async function openGraphPopup(rawData: any) {\r\n    const params: IGraphProps = {\r\n      rawData,\r\n      title: graphTitle,\r\n      config: graphConfig as IConfigGraphMethod,\r\n      getAllConfig,\r\n    };\r\n\r\n    setOpenedGraph(params);\r\n  }\r\n\r\n  async function performAction(\r\n    body: any,\r\n    rawData: any,\r\n    action: IConfigCustomAction,\r\n    containFiles: boolean\r\n  ) {\r\n    const { url, requestHeaders, actualMethod } = action;\r\n\r\n    return await httpService.fetch({\r\n      method: actualMethod || \"put\",\r\n      origUrl: url,\r\n      rawData,\r\n      body: containFiles ? body : JSON.stringify(body),\r\n      headers: {\r\n        ...pageHeaders,\r\n        ...(requestHeaders || {}),\r\n        ...(containFiles ? {} : { \"content-type\": \"application/json\" }),\r\n      },\r\n      responseType: \"boolean\",\r\n    });\r\n  }\r\n\r\n  function extractQueryParams(\r\n    params: IConfigInputField[]\r\n  ): IConfigInputField[] {\r\n    if (!paginationConfig || isQueryPagination(paginationConfig)) {\r\n      const parsedParams = QueryString.parse(location.search);\r\n      const finalQueryParams = params.map((queryParam) => {\r\n        if (typeof parsedParams[queryParam.name] !== \"undefined\") {\r\n          queryParam.value =\r\n            queryParam.type === \"boolean\"\r\n              ? parsedParams[queryParam.name] === \"true\"\r\n              : decodeURIComponent(parsedParams[queryParam.name] as any);\r\n        } else {\r\n          queryParam.value = queryParam.value || \"\";\r\n        }\r\n        return queryParam;\r\n      });\r\n\r\n      setPagination(getUpdatedPaginationState(finalQueryParams, null));\r\n\r\n      return finalQueryParams;\r\n    } else {\r\n      return params;\r\n    }\r\n  }\r\n\r\n  async function fetchPageData(params: {\r\n    actualMethod: \"get\" | \"put\" | \"post\" | \"patch\" | \"delete\";\r\n    url: string;\r\n    requestHeaders?: any;\r\n    dataPath: string;\r\n    dataTransform: any;\r\n    sortBy: any;\r\n  }) {\r\n    const result = await httpService.fetch({\r\n      method: params.actualMethod || \"get\",\r\n      origUrl: params.url,\r\n      queryParams,\r\n      headers: Object.assign({}, pageHeaders, params.requestHeaders || {}),\r\n    });\r\n    let extractedData = dataHelpers.extractDataByDataPath(\r\n      result,\r\n      params.dataPath\r\n    );\r\n\r\n    if (!extractedData) {\r\n      throw new Error(\"Could not extract data from response.\");\r\n    }\r\n\r\n    if (!Array.isArray(extractedData)) {\r\n      throw new Error(\"Extracted data is invalid.\");\r\n    }\r\n\r\n    if (typeof params.dataTransform === \"function\") {\r\n      extractedData = await params.dataTransform(extractedData);\r\n    }\r\n\r\n    const orderedItems = orderBy(\r\n      extractedData,\r\n      typeof params.sortBy === \"string\" ? [params.sortBy] : params.sortBy || []\r\n    );\r\n\r\n    if (paginationConfig) {\r\n      const total = paginationConfig.fields?.total\r\n        ? dataHelpers.extractDataByDataPath(\r\n            result,\r\n            paginationConfig.fields.total.dataPath\r\n          )\r\n        : undefined;\r\n      const newPaginationState = getUpdatedPaginationState(\r\n        queryParams,\r\n        result,\r\n        total\r\n      );\r\n      if (newPaginationState) {\r\n        setPagination(newPaginationState);\r\n      }\r\n    }\r\n\r\n    if (infiniteScroll) {\r\n      setItems([...items, ...orderedItems]);\r\n    } else {\r\n      setItems(orderedItems);\r\n    }\r\n  }\r\n\r\n  async function getAllRequest() {\r\n    if (infiniteScroll) {\r\n      if (pagination) {\r\n        if (isQueryPaginationState(pagination)) {\r\n          if (pagination?.page !== 1) {\r\n            setLoading(false);\r\n          }\r\n        } else if (isBodyPaginationState(pagination)) {\r\n          if (pagination.previous) {\r\n            setLoading(false);\r\n          }\r\n        } else {\r\n          throw new Error(\"unrecognized pagination source\");\r\n        }\r\n      }\r\n    } else {\r\n      setLoading(true);\r\n    }\r\n\r\n    setError(null);\r\n\r\n    try {\r\n      if (!getAllConfig) {\r\n        throw new Error(\"Get all method is not defined.\");\r\n      }\r\n\r\n      if (paginationConfig && !pagination) {\r\n        throw new Error(\"Pagination not initialized.\");\r\n      }\r\n\r\n      const {\r\n        url,\r\n        requestHeaders,\r\n        actualMethod,\r\n        dataPath,\r\n        sortBy,\r\n        dataTransform,\r\n      } = getAllConfig;\r\n      await fetchPageData({\r\n        actualMethod: actualMethod,\r\n        url: url,\r\n        requestHeaders: requestHeaders,\r\n        dataPath: dataPath,\r\n        dataTransform: dataTransform,\r\n        sortBy: sortBy,\r\n      });\r\n    } catch (e) {\r\n      setError(e.message);\r\n    }\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  async function addItem(body: any, containFiles?: boolean, queryParams?: []) {\r\n    if (!postConfig) {\r\n      throw new Error(\"Post method is not defined.\");\r\n    }\r\n\r\n    const { url, requestHeaders, actualMethod } = postConfig;\r\n\r\n    return await httpService.fetch({\r\n      method: actualMethod || \"post\",\r\n      origUrl: url,\r\n      queryParams,\r\n      body: containFiles ? body : JSON.stringify(body),\r\n      headers: {\r\n        ...pageHeaders,\r\n        ...(requestHeaders || {}),\r\n        ...(containFiles ? {} : { \"content-type\": \"application/json\" }),\r\n      },\r\n      responseType: \"boolean\",\r\n    });\r\n  }\r\n\r\n  async function updateItem(body: any, rawData: any, containFiles?: boolean) {\r\n    if (!putConfig) {\r\n      throw new Error(\"Put method is not defined.\");\r\n    }\r\n\r\n    const { url, requestHeaders, actualMethod } = putConfig;\r\n\r\n    return await httpService.fetch({\r\n      method: actualMethod || \"put\",\r\n      origUrl: url,\r\n      rawData,\r\n      body: containFiles ? body : JSON.stringify(body),\r\n      headers: {\r\n        ...pageHeaders,\r\n        ...(requestHeaders || {}),\r\n        ...(containFiles ? {} : { \"content-type\": \"application/json\" }),\r\n      },\r\n      responseType: \"boolean\",\r\n    });\r\n  }\r\n\r\n  async function deleteItem(item: any) {\r\n    const approved: boolean = window.confirm(\r\n      \"Are you sure you want to delete this item?\"\r\n    );\r\n\r\n    if (!approved) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (!deleteConfig) {\r\n        throw new Error(\"Delete method is not defined.\");\r\n      }\r\n\r\n      const { url, requestHeaders, actualMethod } = deleteConfig;\r\n      const success = await httpService.fetch({\r\n        method: actualMethod || \"delete\",\r\n        origUrl: url,\r\n        rawData: item,\r\n        headers: Object.assign({}, pageHeaders, requestHeaders || {}),\r\n        responseType: \"boolean\",\r\n      });\r\n\r\n      if (success) {\r\n        if (pagination?.type === \"infinite-scroll\") {\r\n          setItems([]);\r\n          const updatedParams = [...queryParams];\r\n          remove(updatedParams, (param) =>\r\n            [\"page\", \"limit\"].includes(param.name)\r\n          );\r\n          setQueryParams(\r\n            buildInitQueryParamsAndPaginationState(\r\n              updatedParams,\r\n              paginationConfig\r\n            ).initQueryParams\r\n          );\r\n        } else {\r\n          getAllRequest();\r\n        }\r\n      }\r\n    } catch (e) {\r\n      toast.error(e.message);\r\n    }\r\n  }\r\n\r\n  function submitQueryParams(\r\n    updatedParams: IConfigInputField[],\r\n    reset?: boolean\r\n  ) {\r\n    if (loading) {\r\n      return;\r\n    }\r\n\r\n    if (reset) {\r\n      setItems([]);\r\n      remove(updatedParams, (param) => [\"page\", \"limit\"].includes(param.name));\r\n      updatedParams = buildInitQueryParamsAndPaginationState(\r\n        updatedParams,\r\n        paginationConfig\r\n      ).initQueryParams;\r\n    }\r\n\r\n    updatedParams.map((queryParam, idx) => {\r\n      if (queryParam.type === \"select\" && queryParam.value === \"-- Select --\") {\r\n        // default value means nothing was selected and thus we explicitly\r\n        // empty out the value in this case; otherwise the string '-- Select --'\r\n        // is used as the value for the given queryParams\r\n        queryParam.value = \"\";\r\n      }\r\n    });\r\n\r\n    setQueryParams(updatedParams);\r\n    setPagination(getUpdatedPaginationState(updatedParams, null));\r\n\r\n    let paramsToUrl = [...updatedParams];\r\n\r\n    if (paginationConfig?.type === \"infinite-scroll\") {\r\n      paramsToUrl = paramsToUrl.filter(\r\n        (param) => ![\"page\", \"limit\"].includes(param.name)\r\n      );\r\n    }\r\n\r\n    // Building query string\r\n    const queryState: string = paramsToUrl\r\n      .map((queryParam, idx) => {\r\n        return `${idx === 0 ? \"?\" : \"\"}${queryParam.name}=${encodeURIComponent(\r\n          queryParam.value || \"\"\r\n        )}`;\r\n      })\r\n      .join(\"&\");\r\n\r\n    // Pushing query state to url\r\n    if (page && queryState) {\r\n      push(queryState);\r\n    }\r\n  }\r\n\r\n  function getUpdatedPaginationState(\r\n    updatedParams: IConfigInputField[],\r\n    result: any,\r\n    total?: number\r\n  ): IPaginationState | undefined {\r\n    if (!paginationConfig) {\r\n      return;\r\n    }\r\n\r\n    if (isQueryPagination(paginationConfig)) {\r\n      if (pagination && !isQueryPaginationState(pagination)) {\r\n        throw new Error(\"unexpected pagination source \" + pagination.source);\r\n      }\r\n      const newState: IQueryPaginationState = pagination\r\n        ? pagination\r\n        : {\r\n            source: \"query\",\r\n            type: paginationConfig.type,\r\n            page: parseInt(paginationConfig.params?.page?.value || \"1\"),\r\n            limit: parseInt(paginationConfig.params?.limit?.value || \"10\"),\r\n            descending:\r\n              paginationConfig.params?.descending?.value === \"true\" || false,\r\n            hasPreviousPage: false,\r\n            hasNextPage: false,\r\n            sortBy: paginationConfig.params?.sortBy?.value,\r\n          };\r\n\r\n      newState.total = total || pagination?.total;\r\n      newState.page =\r\n        parseInt(\r\n          updatedParams.find(\r\n            (param) => param.name === paginationConfig?.params?.page?.name\r\n          )?.value\r\n        ) || newState.page;\r\n      newState.limit =\r\n        parseInt(\r\n          updatedParams.find(\r\n            (param) => param.name === paginationConfig?.params?.limit?.name\r\n          )?.value\r\n        ) || newState.limit;\r\n      newState.descending =\r\n        updatedParams.find(\r\n          (param) => param.name === paginationConfig?.params?.descending?.name\r\n        )?.value === \"true\" || newState.descending;\r\n      newState.sortBy =\r\n        updatedParams.find(\r\n          (param) => param.name === paginationConfig?.params?.sortBy?.name\r\n        )?.value || newState.sortBy;\r\n      newState.hasPreviousPage = paginationHelpers.hasPreviousPage(\r\n        newState.page\r\n      );\r\n      newState.hasNextPage = paginationHelpers.hasNextPage(\r\n        newState.page,\r\n        newState.limit,\r\n        newState.total\r\n      );\r\n      return newState;\r\n    } else if (isBodyPagination(paginationConfig)) {\r\n      if (pagination && !isBodyPaginationState(pagination)) {\r\n        throw new Error(\"unexpected pagination source \" + pagination.source);\r\n      }\r\n      const newState: IBodyPaginationState = pagination\r\n        ? pagination\r\n        : {\r\n            source: \"body\",\r\n            type: paginationConfig.type,\r\n            next: result[paginationConfig.params.nextPath || locale.next],\r\n            previous:\r\n              result[paginationConfig.params.prevPath || locale.previous],\r\n            hasNextPage: !!result[\r\n              paginationConfig.params.nextPath || locale.next\r\n            ],\r\n            hasPreviousPage: !!result[\r\n              paginationConfig.params.prevPath || locale.previous\r\n            ],\r\n            limit: parseInt(paginationConfig.params?.limit?.value || \"10\"),\r\n            total: result[paginationConfig.params.countPath || \"count\"],\r\n          };\r\n      if (result) {\r\n        newState.next = result[paginationConfig.params.nextPath || locale.next];\r\n        newState.previous =\r\n          result[paginationConfig.params.prevPath || locale.previous];\r\n        newState.hasNextPage = !!result[\r\n          paginationConfig.params.nextPath || locale.next\r\n        ];\r\n        newState.hasPreviousPage = !!result[\r\n          paginationConfig.params.prevPath || locale.previous\r\n        ];\r\n        newState.total = result[paginationConfig.params.countPath || \"count\"];\r\n      }\r\n      newState.limit =\r\n        parseInt(\r\n          updatedParams.find(\r\n            (param) => param.name === paginationConfig?.params?.limit?.name\r\n          )?.value\r\n        ) || newState.limit;\r\n      return newState;\r\n    } else {\r\n      throw new Error(\"unrecognized pagination source\");\r\n    }\r\n  }\r\n\r\n  function renderItemsUI() {\r\n    if (loading) {\r\n      return <Loader />;\r\n    }\r\n\r\n    const fields = getAllConfig?.fields || getAllConfig?.display?.fields || [];\r\n    const fieldsToFilter = fields\r\n      .filter((field) => field.filterable)\r\n      .map((field) => field.name);\r\n    let filteredItems = items;\r\n\r\n    if (filter && fieldsToFilter.length) {\r\n      filteredItems = items.filter((item) => {\r\n        let passFilter = false;\r\n        fieldsToFilter.forEach((fieldName) => {\r\n          const value = item[fieldName];\r\n          if (\r\n            typeof value === \"string\" &&\r\n            value.toLowerCase().indexOf(filter) >= 0\r\n          ) {\r\n            passFilter = true;\r\n          }\r\n        });\r\n        return passFilter;\r\n      });\r\n    }\r\n\r\n    if (!filteredItems.length) {\r\n      return <div className=\"app-error\">{locale.nothing_to_see}</div>;\r\n    }\r\n\r\n    const getNextPage = paginationConfig\r\n      ? () => {\r\n          if (isQueryPagination(paginationConfig)) {\r\n            if (pagination && !isQueryPaginationState(pagination)) {\r\n              throw new Error(\r\n                \"unexpected pagination source \" + pagination.source\r\n              );\r\n            }\r\n            if (pagination?.page && queryParams.length > 0) {\r\n              const newPage = pagination?.page + 1;\r\n              const updatedParams = queryParams.map((param) => {\r\n                if (param.name === paginationConfig.params?.page?.name) {\r\n                  return {\r\n                    ...param,\r\n                    value: newPage,\r\n                  };\r\n                }\r\n                return param;\r\n              });\r\n              submitQueryParams(updatedParams);\r\n            }\r\n          } else if (isBodyPagination(paginationConfig)) {\r\n            if (pagination && !isBodyPaginationState(pagination)) {\r\n              throw new Error(\r\n                \"unexpected pagination source \" + pagination.source\r\n              );\r\n            }\r\n            if (!getAllConfig || !pagination?.next) {\r\n              return;\r\n            }\r\n            const {\r\n              requestHeaders,\r\n              actualMethod,\r\n              dataPath,\r\n              sortBy,\r\n              dataTransform,\r\n            } = getAllConfig;\r\n            fetchPageData({\r\n              actualMethod: actualMethod,\r\n              url: pagination.next,\r\n              requestHeaders: requestHeaders,\r\n              dataPath: dataPath,\r\n              dataTransform: dataTransform,\r\n              sortBy: sortBy,\r\n            });\r\n          } else {\r\n            throw new Error(\"unrecognized pagination source\");\r\n          }\r\n        }\r\n      : null;\r\n\r\n    const getPreviousPage = paginationConfig\r\n      ? () => {\r\n          if (isQueryPagination(paginationConfig)) {\r\n            if (pagination && !isQueryPaginationState(pagination)) {\r\n              throw new Error(\r\n                \"unexpected pagination source \" + pagination.source\r\n              );\r\n            }\r\n            if (\r\n              pagination?.page &&\r\n              pagination.page > 1 &&\r\n              queryParams.length > 0\r\n            ) {\r\n              const newPage = pagination?.page - 1;\r\n              const updatedParams = queryParams.map((param) => {\r\n                if (param.name === paginationConfig.params?.page?.name) {\r\n                  return {\r\n                    ...param,\r\n                    value: newPage,\r\n                  };\r\n                }\r\n                return param;\r\n              });\r\n              submitQueryParams(updatedParams);\r\n            }\r\n          } else if (isBodyPagination(paginationConfig)) {\r\n            if (pagination && !isBodyPaginationState(pagination)) {\r\n              throw new Error(\r\n                \"unexpected pagination source \" + pagination.source\r\n              );\r\n            }\r\n            if (!getAllConfig || !pagination?.previous) {\r\n              return;\r\n            }\r\n            const {\r\n              requestHeaders,\r\n              actualMethod,\r\n              dataPath,\r\n              sortBy,\r\n              dataTransform,\r\n            } = getAllConfig;\r\n            fetchPageData({\r\n              actualMethod: actualMethod,\r\n              url: pagination.previous,\r\n              requestHeaders: requestHeaders,\r\n              dataPath: dataPath,\r\n              dataTransform: dataTransform,\r\n              sortBy: sortBy,\r\n            });\r\n          } else {\r\n            throw new Error(\"unrecognized pagination source\");\r\n          }\r\n        }\r\n      : null;\r\n\r\n    const callbacks = {\r\n      delete: deleteConfig ? deleteItem : null,\r\n      put: putConfig ? openEditPopup : null,\r\n      action: customActions.length ? openCustomActionPopup : () => {},\r\n      getNextPage,\r\n      getPreviousPage,\r\n    };\r\n\r\n    if (getAllConfig?.display.type === \"cards\") {\r\n      return (\r\n        <Cards\r\n          pagination={pagination}\r\n          callbacks={callbacks}\r\n          fields={fields}\r\n          items={filteredItems}\r\n          customActions={customActions}\r\n          customLabels={customLabels}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Table\r\n        pagination={pagination}\r\n        callbacks={callbacks}\r\n        fields={fields}\r\n        items={filteredItems}\r\n        customActions={customActions}\r\n        customLabels={customLabels}\r\n      />\r\n    );\r\n  }\r\n\r\n  function renderPaginationStateLabel() {\r\n    if (loading || !items.length) {\r\n      return;\r\n    }\r\n\r\n    if (!pagination || isQueryPaginationState(pagination)) {\r\n      const currentCountFrom =\r\n        ((pagination?.page || 1) - 1) * (pagination?.limit || 10) + 1;\r\n      const currentCountTo = currentCountFrom + items.length - 1;\r\n      let label: string = `${locale.showing_result} ${currentCountFrom}-${currentCountTo} ${locale.out_of} ${pagination?.total} ${locale.items}`;\r\n\r\n      if (pagination?.type === \"infinite-scroll\") {\r\n        label = `Showing ${pagination?.total} items`;\r\n      }\r\n\r\n      if (customLabels?.pagination?.itemsCount) {\r\n        label = customLabels?.pagination?.itemsCount\r\n          .replace(\":currentCountFrom\", currentCountFrom as any)\r\n          .replace(\":currentCountTo\", currentCountFrom as any)\r\n          .replace(\":totalCount\", pagination?.total as any);\r\n      }\r\n\r\n      return <p className=\"center pagination-state\">{label}</p>;\r\n    }\r\n    if (isBodyPaginationState(pagination)) {\r\n      // TODO: extract start end end in a meaningful manner from the API\r\n      // this is not something that id based pagination APIs support generally\r\n      let label: string = `Total Results: ${pagination?.total}`;\r\n      if (pagination?.type === \"infinite-scroll\") {\r\n        label = `Showing ${pagination?.total} items`;\r\n      }\r\n\r\n      if (customLabels?.pagination?.itemsCount) {\r\n        label = customLabels?.pagination?.itemsCount.replace(\r\n          \":totalCount\",\r\n          pagination?.total as any\r\n        );\r\n      }\r\n\r\n      return <p className=\"center pagination-state\">{label}</p>;\r\n    }\r\n  }\r\n\r\n  function renderPageContent() {\r\n    const fields = getAllConfig?.fields || getAllConfig?.display?.fields || [];\r\n    const fieldsToFilter = fields\r\n      .filter((field) => field.filterable)\r\n      .map((field) => field.name);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <QueryParams\r\n          initialParams={queryParams}\r\n          paginationConfig={paginationConfig}\r\n          submitCallback={submitQueryParams}\r\n        />\r\n        {fieldsToFilter.length > 0 && <FilterField onChange={setFilter} />}\r\n        {pagination?.total && renderPaginationStateLabel()}\r\n        {error ? <div className=\"app-error\">{error}</div> : renderItemsUI()}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    const nextActivePage: IConfigPage | null =\r\n      context?.config?.pages?.filter(\r\n        (p, pIdx) => p.id === page || pIdx + 1 === parseInt(page || \"\")\r\n      )[0] || null;\r\n    context.setActivePage(nextActivePage);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [page]);\r\n\r\n  useEffect(() => {\r\n    const {\r\n      initQueryParams,\r\n      initialPagination,\r\n    } = buildInitQueryParamsAndPaginationState(\r\n      getAllConfig?.queryParams || [],\r\n      paginationConfig\r\n    );\r\n\r\n    setItems([]);\r\n    setQueryParams(extractQueryParams(initQueryParams));\r\n    setPagination(initialPagination);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [activePage]);\r\n\r\n  useEffect(() => {\r\n    // Load data when query params\r\n    getAllRequest();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [queryParams]);\r\n\r\n  return (\r\n    <div className=\"app-page\">\r\n      <header className=\"app-page-header\">\r\n        <hgroup>\r\n          <h2>{activePage?.name}</h2>\r\n          {activePage?.description && <h4>{activePage?.description}</h4>}\r\n        </hgroup>\r\n        {graphConfig && (\r\n          <Button\r\n            className=\"add-item\"\r\n            color=\"green\"\r\n            onClick={() =>\r\n              setOpenedGraph({\r\n                title: graphTitle,\r\n                config: graphConfig,\r\n              })\r\n            }\r\n          >\r\n            {openGraphLabel}\r\n          </Button>\r\n        )}\r\n        {postConfig && (\r\n          <Button\r\n            className=\"add-item\"\r\n            color=\"green\"\r\n            onClick={() =>\r\n              setOpenedPopup({\r\n                type: \"add\",\r\n                title: addItemFormTitle,\r\n                config: postConfig,\r\n                submitCallback: addItem,\r\n              })\r\n            }\r\n          >\r\n            {addItemLabel}\r\n          </Button>\r\n        )}\r\n      </header>\r\n      <main className=\"app-page-content\">{renderPageContent()}</main>\r\n      {openedPopup && (\r\n        <FormPopup\r\n          title={openedPopup.title}\r\n          closeCallback={closeFormPopup}\r\n          submitCallback={openedPopup.submitCallback}\r\n          fields={openedPopup.config?.fields || []}\r\n          rawData={openedPopup.rawData}\r\n          getSingleConfig={openedPopup.getSingleConfig}\r\n          methodConfig={openedPopup.config}\r\n        />\r\n      )}\r\n      {openedGraph && (\r\n        <GraphPopup\r\n          title={openedGraph.title}\r\n          closeCallback={closeGraph}\r\n          fields={openedGraph.config?.fields || []}\r\n          rawData={openedGraph.rawData}\r\n          getAllConfig={openedGraph.getAllConfig}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Page = withAppContext(PageComp);\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button } from \"../button/button.comp\";\r\nimport { toast } from \"react-toastify\";\r\nimport { withAppContext } from \"../withContext/withContext.comp\";\r\nimport locale from \"../../common/locale.js\";\r\nimport { IAppContext } from \"../app.context\";\r\n\r\nimport \"./authPage.scss\";\r\n\r\ninterface IProps {\r\n  context: IAppContext;\r\n}\r\n\r\nconst AuthPageComp = ({ context }: IProps) => {\r\n  const { location, replace } = useHistory();\r\n  const [user, setUser] = useState<string>(\"\");\r\n  const [pwd, setPwd] = useState<string>(\"\");\r\n  const [tenant, setTenant] = useState<string>(\"\");\r\n  const { setError, httpService } = context;\r\n\r\n  async function submitForm(e: any) {\r\n    e.preventDefault();\r\n\r\n    console.log(\"entrato nel submit form\");\r\n\r\n    try {\r\n      const credentials = {\r\n        username: `${user}`,\r\n        password: `${pwd}`,\r\n        tenant: `${tenant}`,\r\n      };\r\n      const result = await httpService.fetch({\r\n        method: \"post\",\r\n        origUrl: httpService.loginUrl,\r\n        body: JSON.stringify(credentials),\r\n        headers: { \"content-type\": \"application/json\" },\r\n      });\r\n      if (!result) {\r\n        throw new Error(locale.login_error);\r\n      }\r\n      sessionStorage.setItem(\"diten-token\", result.token);\r\n\r\n      console.log(\"token impostato\");\r\n\r\n      window.location.replace(\"/\");\r\n\r\n      //const { from } = location.state || { from: { pathname: \"/\" } };\r\n      //replace(from);\r\n    } catch (e) {\r\n      setError(e.message);\r\n      toast.error(e.message);\r\n    }\r\n  }\r\n\r\n  function handleUserChange(event: any) {\r\n    setUser(event.target.value);\r\n  }\r\n\r\n  function handlePwdChange(event: any) {\r\n    setPwd(event.target.value);\r\n  }\r\n\r\n  function handleTenantChange(event: any) {\r\n    setTenant(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"auth-page\">\r\n      <form className=\"form-content\" onSubmit={submitForm}>\r\n        <div className=\"form-row row\">\r\n          <label>{locale.username}</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder={locale.username_suggestion}\r\n            onChange={handleUserChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-row row\">\r\n          <label>{locale.password}</label>\r\n          <input\r\n            type=\"password\"\r\n            placeholder={locale.password_suggenstion}\r\n            onChange={handlePwdChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-row row\">\r\n          <label>{locale.tenant}</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder={locale.tenant_suggenstion}\r\n            onChange={handleTenantChange}\r\n          />\r\n        </div>\r\n        <div className=\"buttons-wrapper center\">\r\n          <Button type=\"submit\" onClick={submitForm} color=\"green\">\r\n            {locale.submit}\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const AuthPage = withAppContext(AuthPageComp);\r\n","import React, { useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { IAppContext } from '../app.context';\r\nimport { withAppContext } from '../withContext/withContext.comp';\r\nimport { Button } from '../button/button.comp';\r\n\r\nimport './navigation.scss';\r\n\r\ninterface IProps {\r\n  context: IAppContext\r\n}\r\n\r\nconst NavigationComp = ({ context: { config } }: IProps) => {\r\n  const [isOpened, setIsOpened] = useState<boolean>(false);\r\n\r\n  return (\r\n    <nav className=\"app-nav\">\r\n      <Button className=\"app-nav-opener\" onClick={() => setIsOpened(!isOpened)}>\r\n        {\r\n          isOpened ? \r\n          <i className=\"fa fa-times\" aria-hidden=\"true\"></i> : \r\n          <i className=\"fa fa-bars\" aria-hidden=\"true\"></i>\r\n        }\r\n      </Button>\r\n\r\n      <div className={`app-nav-wrapper ${isOpened ? 'opened' : ''}`}>\r\n        <div className=\"app-nav-links\">\r\n          {\r\n            (config?.pages || []).map((page, idx) => (\r\n              <NavLink to={`/${page.id || idx + 1}`} activeClassName=\"active\" key={`page_${idx}`} onClick={() => setIsOpened(false)}>{page.name}</NavLink>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport const Navigation = withAppContext(NavigationComp);","import React from 'react';\r\nimport { ICustomStyles } from '../../common/models/config.model';\r\n\r\ninterface IProps {\r\n  styles: ICustomStyles\r\n}\r\n\r\nexport const CustomStyles = ({ styles }: IProps) => {\r\n  const cssVars = styles.vars || {};\r\n  const arr = [];\r\n  \r\n  for (const key in cssVars) {\r\n    arr.push(`--${key}: ${(cssVars as any)[key]}`);\r\n  }\r\n\r\n  return (\r\n    <style dangerouslySetInnerHTML={{ __html: `\r\n      :root {\r\n        ${arr.join(';')}\r\n      }\r\n    ` }}>\r\n    </style>\r\n  );\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  HashRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport ConfigService from \"../services/config.service\";\r\nimport { IConfig, IConfigPage } from \"../common/models/config.model\";\r\nimport { Page } from \"../components/page/page.comp\";\r\nimport { AuthPage } from \"../components/authPage/authPage.comp\";\r\nimport { Navigation } from \"../components/navigation/navigation.comp\";\r\nimport { AppContext } from \"./app.context\";\r\nimport HttpService from \"../services/http.service\";\r\nimport { CustomStyles } from \"./customStyles/customStyles.comp\";\r\n\r\nimport \"./app.scss\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst httpService = new HttpService();\r\nconst defaultAppName: string = \"RESTool App\";\r\n\r\nfunction changeFavicon(src: string) {\r\n  const link = document.createElement(\"link\");\r\n  const oldLink = document.getElementById(\"favicon\");\r\n  link.id = \"favicon\";\r\n  link.rel = \"shortcut icon\";\r\n  link.href = src;\r\n  if (oldLink) {\r\n    document.head.removeChild(oldLink);\r\n  }\r\n  document.head.appendChild(link);\r\n}\r\n\r\nfunction App() {\r\n  const [firstLoad, setFirstLoad] = useState<boolean>(true);\r\n  const [config, setConfig] = useState<IConfig | null>(null);\r\n  const [activePage, setActivePage] = useState<IConfigPage | null>(\r\n    config?.pages?.[0] || null\r\n  );\r\n  const [error, setError] = useState<string | null>(null);\r\n  const appName: string = config?.name || defaultAppName;\r\n\r\n  async function loadConfig(url?: string): Promise<void> {\r\n    try {\r\n      const windowConfig = (window as any).RESTool?.config;\r\n      let remoteConfig: IConfig;\r\n      // Try to load config from window object first\r\n      if (!url && windowConfig) {\r\n        remoteConfig = Object.assign({}, windowConfig, {});\r\n      } else {\r\n        remoteConfig = url\r\n          ? await ConfigService.getRemoteConfig(url)\r\n          : await ConfigService.loadDefaultConfig();\r\n      }\r\n\r\n      // Setting global config for httpService\r\n      httpService.baseUrl = remoteConfig.baseUrl || \"\";\r\n      httpService.loginUrl = remoteConfig.loginUrl || \"\";\r\n      httpService.errorMessageDataPath =\r\n        remoteConfig.errorMessageDataPath || \"\";\r\n      httpService.unauthorizedRedirectUrl =\r\n        remoteConfig.unauthorizedRedirectUrl || \"\";\r\n      httpService.requestHeaders = remoteConfig.requestHeaders || {};\r\n      document.title = remoteConfig.name || defaultAppName;\r\n\r\n      if (remoteConfig?.favicon) {\r\n        changeFavicon(remoteConfig.favicon);\r\n      }\r\n\r\n      if (remoteConfig?.remoteUrl) {\r\n        return await loadConfig(remoteConfig.remoteUrl);\r\n      }\r\n\r\n      setConfig(remoteConfig);\r\n    } catch (e) {\r\n      console.error(\"Could not load config file\", e);\r\n    }\r\n\r\n    setFirstLoad(false);\r\n  }\r\n\r\n  function scrollToTop(scrollDuration: number = 250) {\r\n    var cosParameter = window.scrollY / 2,\r\n      scrollCount = 0,\r\n      oldTimestamp = performance.now();\r\n\r\n    function step(newTimestamp: number) {\r\n      scrollCount += Math.PI / (scrollDuration / (newTimestamp - oldTimestamp));\r\n\r\n      if (scrollCount >= Math.PI) {\r\n        window.scrollTo(0, 0);\r\n      }\r\n\r\n      if (window.scrollY === 0) {\r\n        return;\r\n      }\r\n\r\n      window.scrollTo(\r\n        0,\r\n        Math.round(cosParameter + cosParameter * Math.cos(scrollCount))\r\n      );\r\n      oldTimestamp = newTimestamp;\r\n      window.requestAnimationFrame(step);\r\n    }\r\n\r\n    window.requestAnimationFrame(step);\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadConfig();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const { isValid, errorMessage } = ConfigService.validateConfig(config);\r\n\r\n    if (!isValid) {\r\n      setError(errorMessage);\r\n      toast.error(errorMessage);\r\n      return;\r\n    }\r\n  }, [config]);\r\n\r\n  const tkn = sessionStorage.getItem(\"diten-token\");\r\n\r\n  if (tkn === null)\r\n    return (\r\n      <div className=\"restool-app\">\r\n        <AppContext.Provider\r\n          value={{\r\n            config,\r\n            activePage,\r\n            setActivePage,\r\n            error,\r\n            setError,\r\n            httpService,\r\n          }}\r\n        >\r\n          <Router>\r\n            <Route exact path=\"/\" component={AuthPage} />\r\n          </Router>\r\n        </AppContext.Provider>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"restool-app\">\r\n      {!config ? (\r\n        <div className=\"app-error\">\r\n          {firstLoad\r\n            ? \"Loading Configuration...\"\r\n            : \"Could not find config file.\"}\r\n        </div>\r\n      ) : (\r\n        <AppContext.Provider\r\n          value={{\r\n            config,\r\n            activePage,\r\n            setActivePage,\r\n            error,\r\n            setError,\r\n            httpService,\r\n          }}\r\n        >\r\n          {config.customStyles && <CustomStyles styles={config.customStyles} />}\r\n          <Router>\r\n            <aside>\r\n              <h1 title={appName} onClick={() => scrollToTop()}>\r\n                {appName}\r\n              </h1>\r\n              {<Navigation />}\r\n            </aside>\r\n            {config && (\r\n              <Switch>\r\n                <Route exact path=\"/login\" component={AuthPage} />\r\n                <Route exact path=\"/:page\" component={Page} />\r\n                <Redirect path=\"/\" to={`/${config?.pages?.[0]?.id || \"1\"}`} />\r\n              </Switch>\r\n            )}\r\n            <ToastContainer\r\n              position={toast.POSITION.TOP_CENTER}\r\n              autoClose={4000}\r\n              draggable={false}\r\n            />\r\n          </Router>\r\n        </AppContext.Provider>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config: any) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config: any) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config: any) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.scss';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n","const locale = Object.freeze({\r\n    username: 'Nome utente',\r\n    password: 'Password',\r\n    tenant: 'Organizzazione',\r\n    username_suggestion: 'Inserisci il nome utente',\r\n    password_suggenstion: 'Inserisci la password',\r\n    tenant_suggenstion: 'Inserisci la tua organizzazione',\r\n    submit: 'Invio',\r\n    login_error: 'Login errata!',\r\n    search: 'Cerca',\r\n    previous_page: 'Pagina precedente',\r\n    next_page: 'Prossima pagina',\r\n    showing_result: \"Risultati\",\r\n    out_of: \"di\",\r\n    items: \"totali\",\r\n    nothing_to_see: \"Nessun risultato\",\r\n    enter_text: \"Inserisci testo\",\r\n    next : \"Successivo\",\r\n    previous : \"Precedente\",\r\n    select : \"\",\r\n    add : \"Aggiungi\",\r\n    update : \"Aggiorna\",\r\n    session_expired : \"Sessione scaduta\",\r\n    graph : \"Grafico\"\r\n\r\n});\r\n\r\nmodule.exports = locale;"],"sourceRoot":""}